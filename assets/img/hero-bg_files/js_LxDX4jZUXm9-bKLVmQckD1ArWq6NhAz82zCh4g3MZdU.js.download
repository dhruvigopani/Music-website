/*!
 * jQuery Form Plugin
 * version: 3.51.0-2014.06.20
 * Requires jQuery v1.5 or later
 * Copyright (c) 2014 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
!function(e){"use strict";e("undefined"!=typeof jQuery?jQuery:window.Zepto)}(function(e){"use strict";function t(t){var r=t.data;t.isDefaultPrevented()||(t.preventDefault(),e(t.target).ajaxSubmit(r))}function r(t){var r=t.target,a=e(r);if(!a.is("[type=submit],[type=image]")){var n=a.closest("[type=submit]");if(0===n.length)return;r=n[0]}var i=this;if(i.clk=r,"image"==r.type)if(void 0!==t.offsetX)i.clk_x=t.offsetX,i.clk_y=t.offsetY;else if("function"==typeof e.fn.offset){var o=a.offset();i.clk_x=t.pageX-o.left,i.clk_y=t.pageY-o.top}else i.clk_x=t.pageX-r.offsetLeft,i.clk_y=t.pageY-r.offsetTop;setTimeout(function(){i.clk=i.clk_x=i.clk_y=null},100)}function a(){if(e.fn.ajaxSubmit.debug){var t="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(t):window.opera&&window.opera.postError&&window.opera.postError(t)}}var n={};n.fileapi=void 0!==e("<input type='file'/>").get(0).files,n.formdata=void 0!==window.FormData;var i=!!e.fn.prop;e.fn.attr2=function(){if(!i)return this.attr.apply(this,arguments);var e=this.prop.apply(this,arguments);return e&&e.jquery||"string"==typeof e?e:this.attr.apply(this,arguments)},e.fn.ajaxSubmit=function(t){function r(r){var a,n,i=e.param(r,t.traditional).split("&"),o=i.length,s=[];for(a=0;o>a;a++)i[a]=i[a].replace(/\+/g," "),n=i[a].split("="),s.push([decodeURIComponent(n[0]),decodeURIComponent(n[1])]);return s}function o(a){for(var n=new FormData,i=0;i<a.length;i++)n.append(a[i].name,a[i].value);if(t.extraData){var o=r(t.extraData);for(i=0;i<o.length;i++)o[i]&&n.append(o[i][0],o[i][1])}t.data=null;var s=e.extend(!0,{},e.ajaxSettings,t,{contentType:!1,processData:!1,cache:!1,type:u||"POST"});t.uploadProgress&&(s.xhr=function(){var r=e.ajaxSettings.xhr();return r.upload&&r.upload.addEventListener("progress",function(e){var r=0,a=e.loaded||e.position,n=e.total;e.lengthComputable&&(r=Math.ceil(a/n*100)),t.uploadProgress(e,a,n,r)},!1),r}),s.data=null;var c=s.beforeSend;return s.beforeSend=function(e,r){r.data=t.formData?t.formData:n,c&&c.call(this,e,r)},e.ajax(s)}function s(r){function n(e){var t=null;try{e.contentWindow&&(t=e.contentWindow.document)}catch(r){a("cannot get iframe.contentWindow document: "+r)}if(t)return t;try{t=e.contentDocument?e.contentDocument:e.document}catch(r){a("cannot get iframe.contentDocument: "+r),t=e.document}return t}function o(){function t(){try{var e=n(g).readyState;a("state = "+e),e&&"uninitialized"==e.toLowerCase()&&setTimeout(t,50)}catch(r){a("Server abort: ",r," (",r.name,")"),s(k),j&&clearTimeout(j),j=void 0}}var r=f.attr2("target"),i=f.attr2("action"),o="multipart/form-data",c=f.attr("enctype")||f.attr("encoding")||o;w.setAttribute("target",d),(!u||/post/i.test(u))&&w.setAttribute("method","POST"),i!=m.url&&w.setAttribute("action",m.url),m.skipEncodingOverride||u&&!/post/i.test(u)||f.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),m.timeout&&(j=setTimeout(function(){T=!0,s(D)},m.timeout));var l=[];try{if(m.extraData)for(var p in m.extraData)m.extraData.hasOwnProperty(p)&&l.push(e.isPlainObject(m.extraData[p])&&m.extraData[p].hasOwnProperty("name")&&m.extraData[p].hasOwnProperty("value")?e('<input type="hidden" name="'+m.extraData[p].name+'">').val(m.extraData[p].value).appendTo(w)[0]:e('<input type="hidden" name="'+p+'">').val(m.extraData[p]).appendTo(w)[0]);m.iframeTarget||v.appendTo("body"),g.attachEvent?g.attachEvent("onload",s):g.addEventListener("load",s,!1),setTimeout(t,15);try{w.submit()}catch(h){var x=document.createElement("form").submit;x.apply(w)}}finally{w.setAttribute("action",i),w.setAttribute("enctype",c),r?w.setAttribute("target",r):f.removeAttr("target"),e(l).remove()}}function s(t){if(!x.aborted&&!F){if(M=n(g),M||(a("cannot access response document"),t=k),t===D&&x)return x.abort("timeout"),void S.reject(x,"timeout");if(t==k&&x)return x.abort("server abort"),void S.reject(x,"error","server abort");if(M&&M.location.href!=m.iframeSrc||T){g.detachEvent?g.detachEvent("onload",s):g.removeEventListener("load",s,!1);var r,i="success";try{if(T)throw"timeout";var o="xml"==m.dataType||M.XMLDocument||e.isXMLDoc(M);if(a("isXml="+o),!o&&window.opera&&(null===M.body||!M.body.innerHTML)&&--O)return a("requeing onLoad callback, DOM not available"),void setTimeout(s,250);var u=M.body?M.body:M.documentElement;x.responseText=u?u.innerHTML:null,x.responseXML=M.XMLDocument?M.XMLDocument:M,o&&(m.dataType="xml"),x.getResponseHeader=function(e){var t={"content-type":m.dataType};return t[e.toLowerCase()]},u&&(x.status=Number(u.getAttribute("status"))||x.status,x.statusText=u.getAttribute("statusText")||x.statusText);var c=(m.dataType||"").toLowerCase(),l=/(json|script|text)/.test(c);if(l||m.textarea){var f=M.getElementsByTagName("textarea")[0];if(f)x.responseText=f.value,x.status=Number(f.getAttribute("status"))||x.status,x.statusText=f.getAttribute("statusText")||x.statusText;else if(l){var d=M.getElementsByTagName("pre")[0],h=M.getElementsByTagName("body")[0];d?x.responseText=d.textContent?d.textContent:d.innerText:h&&(x.responseText=h.textContent?h.textContent:h.innerText)}}else"xml"==c&&!x.responseXML&&x.responseText&&(x.responseXML=X(x.responseText));try{E=_(x,c,m)}catch(b){i="parsererror",x.error=r=b||i}}catch(b){a("error caught: ",b),i="error",x.error=r=b||i}x.aborted&&(a("upload aborted"),i=null),x.status&&(i=x.status>=200&&x.status<300||304===x.status?"success":"error"),"success"===i?(m.success&&m.success.call(m.context,E,"success",x),S.resolve(x.responseText,"success",x),p&&e.event.trigger("ajaxSuccess",[x,m])):i&&(void 0===r&&(r=x.statusText),m.error&&m.error.call(m.context,x,i,r),S.reject(x,"error",r),p&&e.event.trigger("ajaxError",[x,m,r])),p&&e.event.trigger("ajaxComplete",[x,m]),p&&!--e.active&&e.event.trigger("ajaxStop"),m.complete&&m.complete.call(m.context,x,i),F=!0,m.timeout&&clearTimeout(j),setTimeout(function(){m.iframeTarget?v.attr("src",m.iframeSrc):v.remove(),x.responseXML=null},100)}}}var c,l,m,p,d,v,g,x,b,y,T,j,w=f[0],S=e.Deferred();if(S.abort=function(e){x.abort(e)},r)for(l=0;l<h.length;l++)c=e(h[l]),i?c.prop("disabled",!1):c.removeAttr("disabled");if(m=e.extend(!0,{},e.ajaxSettings,t),m.context=m.context||m,d="jqFormIO"+(new Date).getTime(),m.iframeTarget?(v=e(m.iframeTarget),y=v.attr2("name"),y?d=y:v.attr2("name",d)):(v=e('<iframe name="'+d+'" src="'+m.iframeSrc+'" />'),v.css({position:"absolute",top:"-1000px",left:"-1000px"})),g=v[0],x={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var r="timeout"===t?"timeout":"aborted";a("aborting upload... "+r),this.aborted=1;try{g.contentWindow.document.execCommand&&g.contentWindow.document.execCommand("Stop")}catch(n){}v.attr("src",m.iframeSrc),x.error=r,m.error&&m.error.call(m.context,x,r,t),p&&e.event.trigger("ajaxError",[x,m,r]),m.complete&&m.complete.call(m.context,x,r)}},p=m.global,p&&0===e.active++&&e.event.trigger("ajaxStart"),p&&e.event.trigger("ajaxSend",[x,m]),m.beforeSend&&m.beforeSend.call(m.context,x,m)===!1)return m.global&&e.active--,S.reject(),S;if(x.aborted)return S.reject(),S;b=w.clk,b&&(y=b.name,y&&!b.disabled&&(m.extraData=m.extraData||{},m.extraData[y]=b.value,"image"==b.type&&(m.extraData[y+".x"]=w.clk_x,m.extraData[y+".y"]=w.clk_y)));var D=1,k=2,A=e("meta[name=csrf-token]").attr("content"),L=e("meta[name=csrf-param]").attr("content");L&&A&&(m.extraData=m.extraData||{},m.extraData[L]=A),m.forceSync?o():setTimeout(o,10);var E,M,F,O=50,X=e.parseXML||function(e,t){return window.ActiveXObject?(t=new ActiveXObject("Microsoft.XMLDOM"),t.async="false",t.loadXML(e)):t=(new DOMParser).parseFromString(e,"text/xml"),t&&t.documentElement&&"parsererror"!=t.documentElement.nodeName?t:null},C=e.parseJSON||function(e){return window.eval("("+e+")")},_=function(t,r,a){var n=t.getResponseHeader("content-type")||"",i="xml"===r||!r&&n.indexOf("xml")>=0,o=i?t.responseXML:t.responseText;return i&&"parsererror"===o.documentElement.nodeName&&e.error&&e.error("parsererror"),a&&a.dataFilter&&(o=a.dataFilter(o,r)),"string"==typeof o&&("json"===r||!r&&n.indexOf("json")>=0?o=C(o):("script"===r||!r&&n.indexOf("javascript")>=0)&&e.globalEval(o)),o};return S}if(!this.length)return a("ajaxSubmit: skipping submit process - no element selected"),this;var u,c,l,f=this;"function"==typeof t?t={success:t}:void 0===t&&(t={}),u=t.type||this.attr2("method"),c=t.url||this.attr2("action"),l="string"==typeof c?e.trim(c):"",l=l||window.location.href||"",l&&(l=(l.match(/^([^#]+)/)||[])[1]),t=e.extend(!0,{url:l,success:e.ajaxSettings.success,type:u||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var m={};if(this.trigger("form-pre-serialize",[this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(t.beforeSerialize&&t.beforeSerialize(this,t)===!1)return a("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var p=t.traditional;void 0===p&&(p=e.ajaxSettings.traditional);var d,h=[],v=this.formToArray(t.semantic,h);if(t.data&&(t.extraData=t.data,d=e.param(t.data,p)),t.beforeSubmit&&t.beforeSubmit(v,this,t)===!1)return a("ajaxSubmit: submit aborted via beforeSubmit callback"),this;if(this.trigger("form-submit-validate",[v,this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"),this;var g=e.param(v,p);d&&(g=g?g+"&"+d:d),"GET"==t.type.toUpperCase()?(t.url+=(t.url.indexOf("?")>=0?"&":"?")+g,t.data=null):t.data=g;var x=[];if(t.resetForm&&x.push(function(){f.resetForm()}),t.clearForm&&x.push(function(){f.clearForm(t.includeHidden)}),!t.dataType&&t.target){var b=t.success||function(){};x.push(function(r){var a=t.replaceTarget?"replaceWith":"html";e(t.target)[a](r).each(b,arguments)})}else t.success&&x.push(t.success);if(t.success=function(e,r,a){for(var n=t.context||this,i=0,o=x.length;o>i;i++)x[i].apply(n,[e,r,a||f,f])},t.error){var y=t.error;t.error=function(e,r,a){var n=t.context||this;y.apply(n,[e,r,a,f])}}if(t.complete){var T=t.complete;t.complete=function(e,r){var a=t.context||this;T.apply(a,[e,r,f])}}var j=e("input[type=file]:enabled",this).filter(function(){return""!==e(this).val()}),w=j.length>0,S="multipart/form-data",D=f.attr("enctype")==S||f.attr("encoding")==S,k=n.fileapi&&n.formdata;a("fileAPI :"+k);var A,L=(w||D)&&!k;t.iframe!==!1&&(t.iframe||L)?t.closeKeepAlive?e.get(t.closeKeepAlive,function(){A=s(v)}):A=s(v):A=(w||D)&&k?o(v):e.ajax(t),f.removeData("jqxhr").data("jqxhr",A);for(var E=0;E<h.length;E++)h[E]=null;return this.trigger("form-submit-notify",[this,t]),this},e.fn.ajaxForm=function(n){if(n=n||{},n.delegation=n.delegation&&e.isFunction(e.fn.on),!n.delegation&&0===this.length){var i={s:this.selector,c:this.context};return!e.isReady&&i.s?(a("DOM not ready, queuing ajaxForm"),e(function(){e(i.s,i.c).ajaxForm(n)}),this):(a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)")),this)}return n.delegation?(e(document).off("submit.form-plugin",this.selector,t).off("click.form-plugin",this.selector,r).on("submit.form-plugin",this.selector,n,t).on("click.form-plugin",this.selector,n,r),this):this.ajaxFormUnbind().bind("submit.form-plugin",n,t).bind("click.form-plugin",n,r)},e.fn.ajaxFormUnbind=function(){return this.unbind("submit.form-plugin click.form-plugin")},e.fn.formToArray=function(t,r){var a=[];if(0===this.length)return a;var i,o=this[0],s=this.attr("id"),u=t?o.getElementsByTagName("*"):o.elements;if(u&&!/MSIE [678]/.test(navigator.userAgent)&&(u=e(u).get()),s&&(i=e(':input[form="'+s+'"]').get(),i.length&&(u=(u||[]).concat(i))),!u||!u.length)return a;var c,l,f,m,p,d,h;for(c=0,d=u.length;d>c;c++)if(p=u[c],f=p.name,f&&!p.disabled)if(t&&o.clk&&"image"==p.type)o.clk==p&&(a.push({name:f,value:e(p).val(),type:p.type}),a.push({name:f+".x",value:o.clk_x},{name:f+".y",value:o.clk_y}));else if(m=e.fieldValue(p,!0),m&&m.constructor==Array)for(r&&r.push(p),l=0,h=m.length;h>l;l++)a.push({name:f,value:m[l]});else if(n.fileapi&&"file"==p.type){r&&r.push(p);var v=p.files;if(v.length)for(l=0;l<v.length;l++)a.push({name:f,value:v[l],type:p.type});else a.push({name:f,value:"",type:p.type})}else null!==m&&"undefined"!=typeof m&&(r&&r.push(p),a.push({name:f,value:m,type:p.type,required:p.required}));if(!t&&o.clk){var g=e(o.clk),x=g[0];f=x.name,f&&!x.disabled&&"image"==x.type&&(a.push({name:f,value:g.val()}),a.push({name:f+".x",value:o.clk_x},{name:f+".y",value:o.clk_y}))}return a},e.fn.formSerialize=function(t){return e.param(this.formToArray(t))},e.fn.fieldSerialize=function(t){var r=[];return this.each(function(){var a=this.name;if(a){var n=e.fieldValue(this,t);if(n&&n.constructor==Array)for(var i=0,o=n.length;o>i;i++)r.push({name:a,value:n[i]});else null!==n&&"undefined"!=typeof n&&r.push({name:this.name,value:n})}}),e.param(r)},e.fn.fieldValue=function(t){for(var r=[],a=0,n=this.length;n>a;a++){var i=this[a],o=e.fieldValue(i,t);null===o||"undefined"==typeof o||o.constructor==Array&&!o.length||(o.constructor==Array?e.merge(r,o):r.push(o))}return r},e.fieldValue=function(t,r){var a=t.name,n=t.type,i=t.tagName.toLowerCase();if(void 0===r&&(r=!0),r&&(!a||t.disabled||"reset"==n||"button"==n||("checkbox"==n||"radio"==n)&&!t.checked||("submit"==n||"image"==n)&&t.form&&t.form.clk!=t||"select"==i&&-1==t.selectedIndex))return null;if("select"==i){var o=t.selectedIndex;if(0>o)return null;for(var s=[],u=t.options,c="select-one"==n,l=c?o+1:u.length,f=c?o:0;l>f;f++){var m=u[f];if(m.selected){var p=m.value;if(p||(p=m.attributes&&m.attributes.value&&!m.attributes.value.specified?m.text:m.value),c)return p;s.push(p)}}return s}return e(t).val()},e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})},e.fn.clearFields=e.fn.clearInputs=function(t){var r=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var a=this.type,n=this.tagName.toLowerCase();r.test(a)||"textarea"==n?this.value="":"checkbox"==a||"radio"==a?this.checked=!1:"select"==n?this.selectedIndex=-1:"file"==a?/MSIE/.test(navigator.userAgent)?e(this).replaceWith(e(this).clone(!0)):e(this).val(""):t&&(t===!0&&/hidden/.test(a)||"string"==typeof t&&e(this).is(t))&&(this.value="")})},e.fn.resetForm=function(){return this.each(function(){("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset()})},e.fn.enable=function(e){return void 0===e&&(e=!0),this.each(function(){this.disabled=!e})},e.fn.selected=function(t){return void 0===t&&(t=!0),this.each(function(){var r=this.type;if("checkbox"==r||"radio"==r)this.checked=t;else if("option"==this.tagName.toLowerCase()){var a=e(this).parent("select");t&&a[0]&&"select-one"==a[0].type&&a.find("option").selected(!1),this.selected=t}})},e.fn.ajaxSubmit.debug=!1});;
/*!
	Colorbox 1.6.4
	license: MIT
	http://www.jacklmoore.com/colorbox
*/
(function(t,e,i){function n(i,n,o){var r=e.createElement(i);return n&&(r.id=Z+n),o&&(r.style.cssText=o),t(r)}function o(){return i.innerHeight?i.innerHeight:t(i).height()}function r(e,i){i!==Object(i)&&(i={}),this.cache={},this.el=e,this.value=function(e){var n;return void 0===this.cache[e]&&(n=t(this.el).attr("data-cbox-"+e),void 0!==n?this.cache[e]=n:void 0!==i[e]?this.cache[e]=i[e]:void 0!==X[e]&&(this.cache[e]=X[e])),this.cache[e]},this.get=function(e){var i=this.value(e);return t.isFunction(i)?i.call(this.el,this):i}}function h(t){var e=W.length,i=(A+t)%e;return 0>i?e+i:i}function a(t,e){return Math.round((/%/.test(t)?("x"===e?E.width():o())/100:1)*parseInt(t,10))}function s(t,e){return t.get("photo")||t.get("photoRegex").test(e)}function l(t,e){return t.get("retinaUrl")&&i.devicePixelRatio>1?e.replace(t.get("photoRegex"),t.get("retinaSuffix")):e}function d(t){"contains"in x[0]&&!x[0].contains(t.target)&&t.target!==v[0]&&(t.stopPropagation(),x.focus())}function c(t){c.str!==t&&(x.add(v).removeClass(c.str).addClass(t),c.str=t)}function g(e){A=0,e&&e!==!1&&"nofollow"!==e?(W=t("."+te).filter(function(){var i=t.data(this,Y),n=new r(this,i);return n.get("rel")===e}),A=W.index(_.el),-1===A&&(W=W.add(_.el),A=W.length-1)):W=t(_.el)}function u(i){t(e).trigger(i),ae.triggerHandler(i)}function f(i){var o;if(!G){if(o=t(i).data(Y),_=new r(i,o),g(_.get("rel")),!U){U=$=!0,c(_.get("className")),x.css({visibility:"hidden",display:"block",opacity:""}),I=n(se,"LoadedContent","width:0; height:0; overflow:hidden; visibility:hidden"),b.css({width:"",height:""}).append(I),j=T.height()+k.height()+b.outerHeight(!0)-b.height(),D=C.width()+H.width()+b.outerWidth(!0)-b.width(),N=I.outerHeight(!0),z=I.outerWidth(!0);var h=a(_.get("initialWidth"),"x"),s=a(_.get("initialHeight"),"y"),l=_.get("maxWidth"),f=_.get("maxHeight");_.w=Math.max((l!==!1?Math.min(h,a(l,"x")):h)-z-D,0),_.h=Math.max((f!==!1?Math.min(s,a(f,"y")):s)-N-j,0),I.css({width:"",height:_.h}),J.position(),u(ee),_.get("onOpen"),O.add(F).hide(),x.focus(),_.get("trapFocus")&&e.addEventListener&&(e.addEventListener("focus",d,!0),ae.one(re,function(){e.removeEventListener("focus",d,!0)})),_.get("returnFocus")&&ae.one(re,function(){t(_.el).focus()})}var p=parseFloat(_.get("opacity"));v.css({opacity:p===p?p:"",cursor:_.get("overlayClose")?"pointer":"",visibility:"visible"}).show(),_.get("closeButton")?B.html(_.get("close")).appendTo(b):B.appendTo("<div/>"),w()}}function p(){x||(V=!1,E=t(i),x=n(se).attr({id:Y,"class":t.support.opacity===!1?Z+"IE":"",role:"dialog",tabindex:"-1"}).hide(),v=n(se,"Overlay").hide(),L=t([n(se,"LoadingOverlay")[0],n(se,"LoadingGraphic")[0]]),y=n(se,"Wrapper"),b=n(se,"Content").append(F=n(se,"Title"),R=n(se,"Current"),P=t('<button type="button"/>').attr({id:Z+"Previous"}),K=t('<button type="button"/>').attr({id:Z+"Next"}),S=t('<button type="button"/>').attr({id:Z+"Slideshow"}),L),B=t('<button type="button"/>').attr({id:Z+"Close"}),y.append(n(se).append(n(se,"TopLeft"),T=n(se,"TopCenter"),n(se,"TopRight")),n(se,!1,"clear:left").append(C=n(se,"MiddleLeft"),b,H=n(se,"MiddleRight")),n(se,!1,"clear:left").append(n(se,"BottomLeft"),k=n(se,"BottomCenter"),n(se,"BottomRight"))).find("div div").css({"float":"left"}),M=n(se,!1,"position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;"),O=K.add(P).add(R).add(S)),e.body&&!x.parent().length&&t(e.body).append(v,x.append(y,M))}function m(){function i(t){t.which>1||t.shiftKey||t.altKey||t.metaKey||t.ctrlKey||(t.preventDefault(),f(this))}return x?(V||(V=!0,K.click(function(){J.next()}),P.click(function(){J.prev()}),B.click(function(){J.close()}),v.click(function(){_.get("overlayClose")&&J.close()}),t(e).bind("keydown."+Z,function(t){var e=t.keyCode;U&&_.get("escKey")&&27===e&&(t.preventDefault(),J.close()),U&&_.get("arrowKey")&&W[1]&&!t.altKey&&(37===e?(t.preventDefault(),P.click()):39===e&&(t.preventDefault(),K.click()))}),t.isFunction(t.fn.on)?t(e).on("click."+Z,"."+te,i):t("."+te).live("click."+Z,i)),!0):!1}function w(){var e,o,r,h=J.prep,d=++le;if($=!0,q=!1,u(he),u(ie),_.get("onLoad"),_.h=_.get("height")?a(_.get("height"),"y")-N-j:_.get("innerHeight")&&a(_.get("innerHeight"),"y"),_.w=_.get("width")?a(_.get("width"),"x")-z-D:_.get("innerWidth")&&a(_.get("innerWidth"),"x"),_.mw=_.w,_.mh=_.h,_.get("maxWidth")&&(_.mw=a(_.get("maxWidth"),"x")-z-D,_.mw=_.w&&_.w<_.mw?_.w:_.mw),_.get("maxHeight")&&(_.mh=a(_.get("maxHeight"),"y")-N-j,_.mh=_.h&&_.h<_.mh?_.h:_.mh),e=_.get("href"),Q=setTimeout(function(){L.show()},100),_.get("inline")){var c=t(e).eq(0);r=t("<div>").hide().insertBefore(c),ae.one(he,function(){r.replaceWith(c)}),h(c)}else _.get("iframe")?h(" "):_.get("html")?h(_.get("html")):s(_,e)?(e=l(_,e),q=_.get("createImg"),t(q).addClass(Z+"Photo").bind("error."+Z,function(){h(n(se,"Error").html(_.get("imgError")))}).one("load",function(){d===le&&setTimeout(function(){var e;_.get("retinaImage")&&i.devicePixelRatio>1&&(q.height=q.height/i.devicePixelRatio,q.width=q.width/i.devicePixelRatio),_.get("scalePhotos")&&(o=function(){q.height-=q.height*e,q.width-=q.width*e},_.mw&&q.width>_.mw&&(e=(q.width-_.mw)/q.width,o()),_.mh&&q.height>_.mh&&(e=(q.height-_.mh)/q.height,o())),_.h&&(q.style.marginTop=Math.max(_.mh-q.height,0)/2+"px"),W[1]&&(_.get("loop")||W[A+1])&&(q.style.cursor="pointer",t(q).bind("click."+Z,function(){J.next()})),q.style.width=q.width+"px",q.style.height=q.height+"px",h(q)},1)}),q.src=e):e&&M.load(e,_.get("data"),function(e,i){d===le&&h("error"===i?n(se,"Error").html(_.get("xhrError")):t(this).contents())})}var v,x,y,b,T,C,H,k,W,E,I,M,L,F,R,S,K,P,B,O,_,j,D,N,z,A,q,U,$,G,Q,J,V,X={html:!1,photo:!1,iframe:!1,inline:!1,transition:"elastic",speed:300,fadeOut:300,width:!1,initialWidth:"600",innerWidth:!1,maxWidth:!1,height:!1,initialHeight:"450",innerHeight:!1,maxHeight:!1,scalePhotos:!0,scrolling:!0,opacity:.9,preloading:!0,className:!1,overlayClose:!0,escKey:!0,arrowKey:!0,top:!1,bottom:!1,left:!1,right:!1,fixed:!1,data:void 0,closeButton:!0,fastIframe:!0,open:!1,reposition:!0,loop:!0,slideshow:!1,slideshowAuto:!0,slideshowSpeed:2500,slideshowStart:"start slideshow",slideshowStop:"stop slideshow",photoRegex:/\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\?).*)?$/i,retinaImage:!1,retinaUrl:!1,retinaSuffix:"@2x.$1",current:"image {current} of {total}",previous:"previous",next:"next",close:"close",xhrError:"This content failed to load.",imgError:"This image failed to load.",returnFocus:!0,trapFocus:!0,onOpen:!1,onLoad:!1,onComplete:!1,onCleanup:!1,onClosed:!1,rel:function(){return this.rel},href:function(){return t(this).attr("href")},title:function(){return this.title},createImg:function(){var e=new Image,i=t(this).data("cbox-img-attrs");return"object"==typeof i&&t.each(i,function(t,i){e[t]=i}),e},createIframe:function(){var i=e.createElement("iframe"),n=t(this).data("cbox-iframe-attrs");return"object"==typeof n&&t.each(n,function(t,e){i[t]=e}),"frameBorder"in i&&(i.frameBorder=0),"allowTransparency"in i&&(i.allowTransparency="true"),i.name=(new Date).getTime(),i.allowFullscreen=!0,i}},Y="colorbox",Z="cbox",te=Z+"Element",ee=Z+"_open",ie=Z+"_load",ne=Z+"_complete",oe=Z+"_cleanup",re=Z+"_closed",he=Z+"_purge",ae=t("<a/>"),se="div",le=0,de={},ce=function(){function t(){clearTimeout(h)}function e(){(_.get("loop")||W[A+1])&&(t(),h=setTimeout(J.next,_.get("slideshowSpeed")))}function i(){S.html(_.get("slideshowStop")).unbind(s).one(s,n),ae.bind(ne,e).bind(ie,t),x.removeClass(a+"off").addClass(a+"on")}function n(){t(),ae.unbind(ne,e).unbind(ie,t),S.html(_.get("slideshowStart")).unbind(s).one(s,function(){J.next(),i()}),x.removeClass(a+"on").addClass(a+"off")}function o(){r=!1,S.hide(),t(),ae.unbind(ne,e).unbind(ie,t),x.removeClass(a+"off "+a+"on")}var r,h,a=Z+"Slideshow_",s="click."+Z;return function(){r?_.get("slideshow")||(ae.unbind(oe,o),o()):_.get("slideshow")&&W[1]&&(r=!0,ae.one(oe,o),_.get("slideshowAuto")?i():n(),S.show())}}();t[Y]||(t(p),J=t.fn[Y]=t[Y]=function(e,i){var n,o=this;return e=e||{},t.isFunction(o)&&(o=t("<a/>"),e.open=!0),o[0]?(p(),m()&&(i&&(e.onComplete=i),o.each(function(){var i=t.data(this,Y)||{};t.data(this,Y,t.extend(i,e))}).addClass(te),n=new r(o[0],e),n.get("open")&&f(o[0])),o):o},J.position=function(e,i){function n(){T[0].style.width=k[0].style.width=b[0].style.width=parseInt(x[0].style.width,10)-D+"px",b[0].style.height=C[0].style.height=H[0].style.height=parseInt(x[0].style.height,10)-j+"px"}var r,h,s,l=0,d=0,c=x.offset();if(E.unbind("resize."+Z),x.css({top:-9e4,left:-9e4}),h=E.scrollTop(),s=E.scrollLeft(),_.get("fixed")?(c.top-=h,c.left-=s,x.css({position:"fixed"})):(l=h,d=s,x.css({position:"absolute"})),d+=_.get("right")!==!1?Math.max(E.width()-_.w-z-D-a(_.get("right"),"x"),0):_.get("left")!==!1?a(_.get("left"),"x"):Math.round(Math.max(E.width()-_.w-z-D,0)/2),l+=_.get("bottom")!==!1?Math.max(o()-_.h-N-j-a(_.get("bottom"),"y"),0):_.get("top")!==!1?a(_.get("top"),"y"):Math.round(Math.max(o()-_.h-N-j,0)/2),x.css({top:c.top,left:c.left,visibility:"visible"}),y[0].style.width=y[0].style.height="9999px",r={width:_.w+z+D,height:_.h+N+j,top:l,left:d},e){var g=0;t.each(r,function(t){return r[t]!==de[t]?(g=e,void 0):void 0}),e=g}de=r,e||x.css(r),x.dequeue().animate(r,{duration:e||0,complete:function(){n(),$=!1,y[0].style.width=_.w+z+D+"px",y[0].style.height=_.h+N+j+"px",_.get("reposition")&&setTimeout(function(){E.bind("resize."+Z,J.position)},1),t.isFunction(i)&&i()},step:n})},J.resize=function(t){var e;U&&(t=t||{},t.width&&(_.w=a(t.width,"x")-z-D),t.innerWidth&&(_.w=a(t.innerWidth,"x")),I.css({width:_.w}),t.height&&(_.h=a(t.height,"y")-N-j),t.innerHeight&&(_.h=a(t.innerHeight,"y")),t.innerHeight||t.height||(e=I.scrollTop(),I.css({height:"auto"}),_.h=I.height()),I.css({height:_.h}),e&&I.scrollTop(e),J.position("none"===_.get("transition")?0:_.get("speed")))},J.prep=function(i){function o(){return _.w=_.w||I.width(),_.w=_.mw&&_.mw<_.w?_.mw:_.w,_.w}function a(){return _.h=_.h||I.height(),_.h=_.mh&&_.mh<_.h?_.mh:_.h,_.h}if(U){var d,g="none"===_.get("transition")?0:_.get("speed");I.remove(),I=n(se,"LoadedContent").append(i),I.hide().appendTo(M.show()).css({width:o(),overflow:_.get("scrolling")?"auto":"hidden"}).css({height:a()}).prependTo(b),M.hide(),t(q).css({"float":"none"}),c(_.get("className")),d=function(){function i(){t.support.opacity===!1&&x[0].style.removeAttribute("filter")}var n,o,a=W.length;U&&(o=function(){clearTimeout(Q),L.hide(),u(ne),_.get("onComplete")},F.html(_.get("title")).show(),I.show(),a>1?("string"==typeof _.get("current")&&R.html(_.get("current").replace("{current}",A+1).replace("{total}",a)).show(),K[_.get("loop")||a-1>A?"show":"hide"]().html(_.get("next")),P[_.get("loop")||A?"show":"hide"]().html(_.get("previous")),ce(),_.get("preloading")&&t.each([h(-1),h(1)],function(){var i,n=W[this],o=new r(n,t.data(n,Y)),h=o.get("href");h&&s(o,h)&&(h=l(o,h),i=e.createElement("img"),i.src=h)})):O.hide(),_.get("iframe")?(n=_.get("createIframe"),_.get("scrolling")||(n.scrolling="no"),t(n).attr({src:_.get("href"),"class":Z+"Iframe"}).one("load",o).appendTo(I),ae.one(he,function(){n.src="//about:blank"}),_.get("fastIframe")&&t(n).trigger("load")):o(),"fade"===_.get("transition")?x.fadeTo(g,1,i):i())},"fade"===_.get("transition")?x.fadeTo(g,0,function(){J.position(0,d)}):J.position(g,d)}},J.next=function(){!$&&W[1]&&(_.get("loop")||W[A+1])&&(A=h(1),f(W[A]))},J.prev=function(){!$&&W[1]&&(_.get("loop")||A)&&(A=h(-1),f(W[A]))},J.close=function(){U&&!G&&(G=!0,U=!1,u(oe),_.get("onCleanup"),E.unbind("."+Z),v.fadeTo(_.get("fadeOut")||0,0),x.stop().fadeTo(_.get("fadeOut")||0,0,function(){x.hide(),v.hide(),u(he),I.remove(),setTimeout(function(){G=!1,u(re),_.get("onClosed")},1)}))},J.remove=function(){x&&(x.stop(),t[Y].close(),x.stop(!1,!0).remove(),v.remove(),G=!1,x=null,t("."+te).removeData(Y).removeClass(te),t(e).unbind("click."+Z).unbind("keydown."+Z))},J.element=function(){return t(_.el)},J.settings=X)})(jQuery,document,window);;
/**
 * @file
 * Colorbox module init js.
 */

(function ($) {

Drupal.behaviors.initColorbox = {
  attach: function (context, settings) {
    if (!$.isFunction($('a, area, input', context).colorbox) || typeof settings.colorbox === 'undefined') {
      return;
    }

    if (settings.colorbox.mobiledetect && window.matchMedia) {
      // Disable Colorbox for small screens.
      var mq = window.matchMedia("(max-device-width: " + settings.colorbox.mobiledevicewidth + ")");
      if (mq.matches) {
        return;
      }
    }

    // Use "data-colorbox-gallery" if set otherwise use "rel".
    settings.colorbox.rel = function () {
      if ($(this).data('colorbox-gallery')) {
        return $(this).data('colorbox-gallery');
      }
      else {
        return $(this).attr('rel');
      }
    };

    $('.colorbox', context)
      .once('init-colorbox').each(function(){
        $(this).colorbox(settings.colorbox);
      });

    $(context).bind('cbox_complete', function () {
      Drupal.attachBehaviors('#cboxLoadedContent');
    });
  }
};

})(jQuery);
;
/**
 * @file
 * Colorbox module style js.
 */

(function ($) {

Drupal.behaviors.initColorboxDefaultStyle = {
  attach: function (context, settings) {
    $(context).bind('cbox_complete', function () {
      // Only run if there is a title.
      if ($('#cboxTitle:empty', context).length == false) {
        $('#cboxLoadedContent img', context).bind('mouseover', function () {
          $('#cboxTitle', context).slideDown();
        });
        $('#cboxOverlay', context).bind('mouseover', function () {
          $('#cboxTitle', context).slideUp();
        });
      }
      else {
        $('#cboxTitle', context).hide();
      }
    });
  }
};

})(jQuery);
;
(function ($) {

/**
 * A progressbar object. Initialized with the given id. Must be inserted into
 * the DOM afterwards through progressBar.element.
 *
 * method is the function which will perform the HTTP request to get the
 * progress bar state. Either "GET" or "POST".
 *
 * e.g. pb = new progressBar('myProgressBar');
 *      some_element.appendChild(pb.element);
 */
Drupal.progressBar = function (id, updateCallback, method, errorCallback) {
  var pb = this;
  this.id = id;
  this.method = method || 'GET';
  this.updateCallback = updateCallback;
  this.errorCallback = errorCallback;

  // The WAI-ARIA setting aria-live="polite" will announce changes after users
  // have completed their current activity and not interrupt the screen reader.
  this.element = $('<div class="progress" aria-live="polite"></div>').attr('id', id);
  this.element.html('<div class="bar"><div class="filled"></div></div>' +
                    '<div class="percentage"></div>' +
                    '<div class="message">&nbsp;</div>');
};

/**
 * Set the percentage and status message for the progressbar.
 */
Drupal.progressBar.prototype.setProgress = function (percentage, message) {
  if (percentage >= 0 && percentage <= 100) {
    $('div.filled', this.element).css('width', percentage + '%');
    $('div.percentage', this.element).html(percentage + '%');
  }
  $('div.message', this.element).html(message);
  if (this.updateCallback) {
    this.updateCallback(percentage, message, this);
  }
};

/**
 * Start monitoring progress via Ajax.
 */
Drupal.progressBar.prototype.startMonitoring = function (uri, delay) {
  this.delay = delay;
  this.uri = uri;
  this.sendPing();
};

/**
 * Stop monitoring progress via Ajax.
 */
Drupal.progressBar.prototype.stopMonitoring = function () {
  clearTimeout(this.timer);
  // This allows monitoring to be stopped from within the callback.
  this.uri = null;
};

/**
 * Request progress data from server.
 */
Drupal.progressBar.prototype.sendPing = function () {
  if (this.timer) {
    clearTimeout(this.timer);
  }
  if (this.uri) {
    var pb = this;
    // When doing a post request, you need non-null data. Otherwise a
    // HTTP 411 or HTTP 406 (with Apache mod_security) error may result.
    $.ajax({
      type: this.method,
      url: this.uri,
      data: '',
      dataType: 'json',
      success: function (progress) {
        // Display errors.
        if (progress.status == 0) {
          pb.displayError(progress.data);
          return;
        }
        // Update display.
        pb.setProgress(progress.percentage, progress.message);
        // Schedule next timer.
        pb.timer = setTimeout(function () { pb.sendPing(); }, pb.delay);
      },
      error: function (xmlhttp) {
        pb.displayError(Drupal.ajaxError(xmlhttp, pb.uri));
      }
    });
  }
};

/**
 * Display errors on the page.
 */
Drupal.progressBar.prototype.displayError = function (string) {
  var error = $('<div class="messages error"></div>').html(string);
  $(this.element).before(error).hide();

  if (this.errorCallback) {
    this.errorCallback(this);
  }
};

})(jQuery);
;
/**
 * @file
 * JavaScript behaviors for the front-end display of webforms.
 */

(function ($) {

  "use strict";

  Drupal.behaviors.webform = Drupal.behaviors.webform || {};

  Drupal.behaviors.webform.attach = function (context) {
    // Calendar datepicker behavior.
    Drupal.webform.datepicker(context);

    // Conditional logic.
    if (Drupal.settings.webform && Drupal.settings.webform.conditionals) {
      Drupal.webform.conditional(context);
    }
  };

  Drupal.webform = Drupal.webform || {};

  Drupal.webform.datepicker = function (context) {
    $('div.webform-datepicker').each(function () {
      var $webformDatepicker = $(this);
      var $calendar = $webformDatepicker.find('input.webform-calendar');

      // Ensure the page we're on actually contains a datepicker.
      if ($calendar.length == 0) {
        return;
      }

      var startDate = $calendar[0].className.replace(/.*webform-calendar-start-(\d{4}-\d{2}-\d{2}).*/, '$1').split('-');
      var endDate = $calendar[0].className.replace(/.*webform-calendar-end-(\d{4}-\d{2}-\d{2}).*/, '$1').split('-');
      var firstDay = $calendar[0].className.replace(/.*webform-calendar-day-(\d).*/, '$1');
      // Convert date strings into actual Date objects.
      startDate = new Date(startDate[0], startDate[1] - 1, startDate[2]);
      endDate = new Date(endDate[0], endDate[1] - 1, endDate[2]);

      // Ensure that start comes before end for datepicker.
      if (startDate > endDate) {
        var laterDate = startDate;
        startDate = endDate;
        endDate = laterDate;
      }

      var startYear = startDate.getFullYear();
      var endYear = endDate.getFullYear();

      // Set up the jQuery datepicker element.
      $calendar.datepicker({
        dateFormat: 'yy-mm-dd',
        yearRange: startYear + ':' + endYear,
        firstDay: parseInt(firstDay),
        minDate: startDate,
        maxDate: endDate,
        onSelect: function (dateText, inst) {
          var date = dateText.split('-');
          $webformDatepicker.find('select.year, input.year').val(+date[0]).trigger('change');
          $webformDatepicker.find('select.month').val(+date[1]).trigger('change');
          $webformDatepicker.find('select.day').val(+date[2]).trigger('change');
        },
        beforeShow: function (input, inst) {
          // Get the select list values.
          var year = $webformDatepicker.find('select.year, input.year').val();
          var month = $webformDatepicker.find('select.month').val();
          var day = $webformDatepicker.find('select.day').val();

          // If empty, default to the current year/month/day in the popup.
          var today = new Date();
          year = year ? year : today.getFullYear();
          month = month ? month : today.getMonth() + 1;
          day = day ? day : today.getDate();

          // Make sure that the default year fits in the available options.
          year = (year < startYear || year > endYear) ? startYear : year;

          // jQuery UI Datepicker will read the input field and base its date
          // off of that, even though in our case the input field is a button.
          $(input).val(year + '-' + month + '-' + day);
        }
      });

      // Prevent the calendar button from submitting the form.
      $calendar.click(function (event) {
        // This event is triggered also when pressing enter when the focus is on
        // previous webform components, but we only want to do something when
        // we are on the calendar component. By checking the event client x/y
        // position we known if it was the user clicking. For keyboard navigators
        // simply the focus handles the date picker so we don't have to do
        // anything special for them.
        if (event.clientX !== 0 && event.clientY !== 0) {
          // Focus is only necessary for Safari. But it has no impact on other
          // browsers.
          $(this).focus();
          event.preventDefault();
        }
      });

      // Clear date on backspace or delete.
      $calendar.keyup(function (e) {
        if (e.keyCode == 8 || e.keyCode == 46) {
          $.datepicker._clearDate(this);
        }
      });
    });
  };

  Drupal.webform.conditional = function (context) {
    // Add the bindings to each webform on the page.
    $.each(Drupal.settings.webform.conditionals, function (formKey, settings) {
      var $form = $('.' + formKey + ':not(.webform-conditional-processed)');
      $form.each(function (index, currentForm) {
        var $currentForm = $(currentForm);
        $currentForm.addClass('webform-conditional-processed');
        $currentForm.bind('change', {'settings': settings}, Drupal.webform.conditionalCheck);

        // Trigger all the elements that cause conditionals on this form.
        Drupal.webform.doConditions($currentForm, settings);
      });
    });
  };

  /**
   * Event handler to respond to field changes in a form.
   *
   * This event is bound to the entire form, not individual fields.
   */
  Drupal.webform.conditionalCheck = function (e) {
    var $triggerElement = $(e.target).closest('.webform-component');
    if (!$triggerElement.length) {
      return;
    }
    var $form = $triggerElement.closest('form');
    var triggerElementKey = $triggerElement.attr('class').match(/webform-component--[^ ]+/)[0];
    var settings = e.data.settings;
    if (settings.sourceMap[triggerElementKey]) {
      Drupal.webform.doConditions($form, settings);
    }
  };

  /**
   * Processes all conditional.
   */
  Drupal.webform.doConditions = function ($form, settings) {

    var stackPointer;
    var resultStack;

    /**
     * Initializes an execution stack for a conditional group's rules.
     *
     * Also initializes sub-conditional rules.
     */
    function executionStackInitialize(andor) {
      stackPointer = -1;
      resultStack = [];
      executionStackPush(andor);
    }

    /**
     * Starts a new subconditional for the given and/or operator.
     */
    function executionStackPush(andor) {
      resultStack[++stackPointer] = {
        results: [],
        andor: andor,
      };
    }

    /**
     * Adds a rule's result to the current sub-conditional.
     */
    function executionStackAccumulate(result) {
      resultStack[stackPointer]['results'].push(result);
    }

    /**
     * Finishes a sub-conditional and adds the result to the parent stack frame.
     */
    function executionStackPop() {
      // Calculate the and/or result.
      var stackFrame = resultStack[stackPointer];
      // Pop stack and protect against stack underflow.
      stackPointer = Math.max(0, stackPointer - 1);
      var $conditionalResults = stackFrame['results'];
      var filteredResults = $.map($conditionalResults, function (val) {
        return val ? val : null;
      });
      return stackFrame['andor'] === 'or'
                ? filteredResults.length > 0
                : filteredResults.length === $conditionalResults.length;
    }

    // Track what has been set/hidden for each target component's elements.
    // Hidden elements must be disabled because if they are required and don't
    // have a value, they will prevent submission due to html5 validation.
    // Each execution of the conditionals adds a temporary class
    // webform-disabled-flag so that elements hidden or set can be disabled and
    // also be prevented from being re-enabled by another conditional (such as a
    // parent fieldset). After processing conditionals, this temporary class
    // must be removed in preparation for the next execution of the
    // conditionals.
    $.each(settings.ruleGroups, function (rgid_key, rule_group) {
      var ruleGroup = settings.ruleGroups[rgid_key];

      // Perform the comparison callback and build the results for this group.
      executionStackInitialize(ruleGroup['andor']);
      $.each(ruleGroup['rules'], function (m, rule) {
        switch (rule['source_type']) {
          case 'component':
            var elementKey = rule['source'];
            var element = $form.find('.' + elementKey)[0];
            var existingValue = settings.values[elementKey] ? settings.values[elementKey] : null;
            executionStackAccumulate(window['Drupal']['webform'][rule.callback](element, existingValue, rule['value']));
            break;

          case 'conditional_start':
            executionStackPush(rule['andor']);
            break;

          case 'conditional_end':
            executionStackAccumulate(executionStackPop());
            break;
        }
      });
      var conditionalResult = executionStackPop();

      $.each(ruleGroup['actions'], function (aid, action) {
        var $target = $form.find('.' + action['target']);
        var actionResult = action['invert'] ? !conditionalResult : conditionalResult;
        switch (action['action']) {
          case 'show':
            var changed = actionResult != Drupal.webform.isVisible($target);
            if (actionResult) {
              $target.find('.webform-conditional-disabled:not(.webform-disabled-flag)')
                .removeClass('webform-conditional-disabled')
                .webformProp('disabled', false);
              $target
                .removeClass('webform-conditional-hidden')
                .show();
              $form.find('.chosen-disabled').prev().trigger('chosen:updated.chosen');
            }
            else {
              $target
                .hide()
                .addClass('webform-conditional-hidden')
                .find(':input')
                  .addClass('webform-conditional-disabled webform-disabled-flag')
                  .webformProp('disabled', true);
            }
            if (changed && $target.is('tr')) {
              Drupal.webform.restripeTable($target.closest('table').first());
            }
            break;

          case 'require':
            var $requiredSpan = $target.find('.form-required, .form-optional').first();
            if (actionResult != $requiredSpan.hasClass('form-required')) {
              var $targetInputElements = $target.find("input:text,textarea,input[type='email'],select,input:radio,input:checkbox,input:file");
              // Rather than hide the required tag, remove it so that other
              // jQuery can respond via Drupal behaviors.
              Drupal.detachBehaviors($requiredSpan);
              $targetInputElements
                .webformProp('required', actionResult)
                .toggleClass('required', actionResult);
              if (actionResult) {
                $requiredSpan.replaceWith('<span class="form-required" title="' + Drupal.t('This field is required.') + '">*</span>');
              }
              else {
                $requiredSpan.replaceWith('<span class="form-optional"></span>');
              }
              Drupal.attachBehaviors($requiredSpan);
            }
            break;

          case 'set':
            var $texts = $target.find("input:text,textarea,input[type='email']");
            var $selects = $target.find('select,select option,input:radio,input:checkbox');
            var $markups = $target.filter('.webform-component-markup');
            if (actionResult) {
              var multiple = $.map(action['argument'].split(','), $.trim);
              $selects
                .webformVal(multiple)
                .webformProp('disabled', true)
                  .addClass('webform-disabled-flag');
              $texts
                .val([action['argument']])
                .webformProp('readonly', true)
                .addClass('webform-disabled-flag');
              // A special case is made for markup. It is sanitized with
              // filter_xss_admin on the server. otherwise text() should be used
              // to avoid an XSS vulnerability. text() however would preclude
              // the use of tags like <strong> or <a>.
              $markups.html(action['argument']);
            }
            else {
              $selects.not('.webform-disabled-flag')
                .webformProp('disabled', false);
              $texts.not('.webform-disabled-flag')
                .webformProp('readonly', false);
              // Markup not set? Then restore original markup as provided in
              // the attribute data-webform-markup.
              $markups.each(function () {
                var $this = $(this);
                var original = $this.data('webform-markup');
                if (original !== undefined) {
                  $this.html(original);
                }
              });
            }
            break;
        }
      }); // End look on each action for one conditional.
    }); // End loop on each conditional.

    $form.find('.webform-disabled-flag').removeClass('webform-disabled-flag');
  };

  /**
   * Event handler to prevent propagation of events.
   *
   * Typically click for disabling radio and checkboxes.
   */
  Drupal.webform.stopEvent = function () {
    return false;
  };

  Drupal.webform.conditionalOperatorStringEqual = function (element, existingValue, ruleValue) {
    var returnValue = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase() === ruleValue.toLowerCase()) {
        returnValue = true;
        return false; // break.
      }
    });
    return returnValue;
  };

  Drupal.webform.conditionalOperatorStringNotEqual = function (element, existingValue, ruleValue) {
    var found = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase() === ruleValue.toLowerCase()) {
        found = true;
      }
    });
    return !found;
  };

  Drupal.webform.conditionalOperatorStringContains = function (element, existingValue, ruleValue) {
    var returnValue = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase().indexOf(ruleValue.toLowerCase()) > -1) {
        returnValue = true;
        return false; // break.
      }
    });
    return returnValue;
  };

  Drupal.webform.conditionalOperatorStringDoesNotContain = function (element, existingValue, ruleValue) {
    var found = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase().indexOf(ruleValue.toLowerCase()) > -1) {
        found = true;
      }
    });
    return !found;
  };

  Drupal.webform.conditionalOperatorStringBeginsWith = function (element, existingValue, ruleValue) {
    var returnValue = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase().indexOf(ruleValue.toLowerCase()) === 0) {
        returnValue = true;
        return false; // break.
      }
    });
    return returnValue;
  };

  Drupal.webform.conditionalOperatorStringEndsWith = function (element, existingValue, ruleValue) {
    var returnValue = false;
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    $.each(currentValue, function (n, value) {
      if (value.toLowerCase().lastIndexOf(ruleValue.toLowerCase()) === value.length - ruleValue.length) {
        returnValue = true;
        return false; // break.
      }
    });
    return returnValue;
  };

  Drupal.webform.conditionalOperatorStringEmpty = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    var returnValue = true;
    $.each(currentValue, function (n, value) {
      if (value !== '') {
        returnValue = false;
        return false; // break.
      }
    });
    return returnValue;
  };

  Drupal.webform.conditionalOperatorStringNotEmpty = function (element, existingValue, ruleValue) {
    return !Drupal.webform.conditionalOperatorStringEmpty(element, existingValue, ruleValue);
  };

  Drupal.webform.conditionalOperatorSelectGreaterThan = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    return Drupal.webform.compare_select(currentValue[0], ruleValue, element) > 0;
  };

  Drupal.webform.conditionalOperatorSelectGreaterThanEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    var comparison = Drupal.webform.compare_select(currentValue[0], ruleValue, element);
    return comparison > 0 || comparison === 0;
  };

  Drupal.webform.conditionalOperatorSelectLessThan = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    return Drupal.webform.compare_select(currentValue[0], ruleValue, element) < 0;
  };

  Drupal.webform.conditionalOperatorSelectLessThanEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    var comparison = Drupal.webform.compare_select(currentValue[0], ruleValue, element);
    return comparison < 0 || comparison === 0;
  };

  Drupal.webform.conditionalOperatorNumericEqual = function (element, existingValue, ruleValue) {
    // See float comparison: http://php.net/manual/en/language.types.float.php
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    var epsilon = 0.000001;
    // An empty string does not match any number.
    return currentValue[0] === '' ? false : (Math.abs(parseFloat(currentValue[0]) - parseFloat(ruleValue)) < epsilon);
  };

  Drupal.webform.conditionalOperatorNumericNotEqual = function (element, existingValue, ruleValue) {
    // See float comparison: http://php.net/manual/en/language.types.float.php
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    var epsilon = 0.000001;
    // An empty string does not match any number.
    return currentValue[0] === '' ? true : (Math.abs(parseFloat(currentValue[0]) - parseFloat(ruleValue)) >= epsilon);
  };

  Drupal.webform.conditionalOperatorNumericGreaterThan = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    return parseFloat(currentValue[0]) > parseFloat(ruleValue);
  };

  Drupal.webform.conditionalOperatorNumericGreaterThanEqual = function (element, existingValue, ruleValue) {
    return Drupal.webform.conditionalOperatorNumericGreaterThan(element, existingValue, ruleValue) ||
           Drupal.webform.conditionalOperatorNumericEqual(element, existingValue, ruleValue);
  };

  Drupal.webform.conditionalOperatorNumericLessThan = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.stringValue(element, existingValue);
    return parseFloat(currentValue[0]) < parseFloat(ruleValue);
  };

  Drupal.webform.conditionalOperatorNumericLessThanEqual = function (element, existingValue, ruleValue) {
    return Drupal.webform.conditionalOperatorNumericLessThan(element, existingValue, ruleValue) ||
           Drupal.webform.conditionalOperatorNumericEqual(element, existingValue, ruleValue);
  };

  Drupal.webform.conditionalOperatorDateEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.dateValue(element, existingValue);
    return currentValue === ruleValue;
  };

  Drupal.webform.conditionalOperatorDateNotEqual = function (element, existingValue, ruleValue) {
    return !Drupal.webform.conditionalOperatorDateEqual(element, existingValue, ruleValue);
  };

  Drupal.webform.conditionalOperatorDateBefore = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.dateValue(element, existingValue);
    return (currentValue !== false) && currentValue < ruleValue;
  };

  Drupal.webform.conditionalOperatorDateBeforeEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.dateValue(element, existingValue);
    return (currentValue !== false) && (currentValue < ruleValue || currentValue === ruleValue);
  };

  Drupal.webform.conditionalOperatorDateAfter = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.dateValue(element, existingValue);
    return (currentValue !== false) && currentValue > ruleValue;
  };

  Drupal.webform.conditionalOperatorDateAfterEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.dateValue(element, existingValue);
    return (currentValue !== false) && (currentValue > ruleValue || currentValue === ruleValue);
  };

  Drupal.webform.conditionalOperatorTimeEqual = function (element, existingValue, ruleValue) {
    var currentValue = Drupal.webform.timeValue(element, existingValue);
    return currentValue === ruleValue;
  };

  Drupal.webform.conditionalOperatorTimeNotEqual = function (element, existingValue, ruleValue) {
    return !Drupal.webform.conditionalOperatorTimeEqual(element, existingValue, ruleValue);
  };

  Drupal.webform.conditionalOperatorTimeBefore = function (element, existingValue, ruleValue) {
    // Date and time operators intentionally exclusive for "before".
    var currentValue = Drupal.webform.timeValue(element, existingValue);
    return (currentValue !== false) && (currentValue < ruleValue);
  };

  Drupal.webform.conditionalOperatorTimeBeforeEqual = function (element, existingValue, ruleValue) {
    // Date and time operators intentionally exclusive for "before".
    var currentValue = Drupal.webform.timeValue(element, existingValue);
    return (currentValue !== false) && (currentValue < ruleValue || currentValue === ruleValue);
  };

  Drupal.webform.conditionalOperatorTimeAfter = function (element, existingValue, ruleValue) {
    // Date and time operators intentionally inclusive for "after".
    var currentValue = Drupal.webform.timeValue(element, existingValue);
    return (currentValue !== false) && (currentValue > ruleValue);
  };

  Drupal.webform.conditionalOperatorTimeAfterEqual = function (element, existingValue, ruleValue) {
    // Date and time operators intentionally inclusive for "after".
    var currentValue = Drupal.webform.timeValue(element, existingValue);
    return (currentValue !== false) && (currentValue > ruleValue || currentValue === ruleValue);
  };

  /**
   * Utility function to compare values of a select component.
   *
   * @param string a
   *   First select option key to compare
   * @param string b
   *   Second select option key to compare
   * @param array options
   *   Associative array where the a and b are within the keys
   *
   * @return integer based upon position of $a and $b in $options
   *   -N if $a above (<) $b
   *   0 if $a = $b
   *   +N if $a is below (>) $b
   */
  Drupal.webform.compare_select = function (a, b, element) {
    var optionList = [];
    $('option,input:radio,input:checkbox', element).each(function () {
      optionList.push($(this).val());
    });
    var a_position = optionList.indexOf(a);
    var b_position = optionList.indexOf(b);
    return (a_position < 0 || b_position < 0) ? null : a_position - b_position;
  };

  /**
   * Utility to return current visibility.
   *
   * Uses actual visibility, except for hidden components which use the applied
   * disabled class.
   */
  Drupal.webform.isVisible = function ($element) {
    return $element.hasClass('webform-component-hidden')
              ? !$element.find('input').first().hasClass('webform-conditional-disabled')
              : $element.closest('.webform-conditional-hidden').length == 0;
  };

  /**
   * Function to get a string value from a select/radios/text/etc. field.
   */
  Drupal.webform.stringValue = function (element, existingValue) {
    var value = [];
    if (element) {
      var $element = $(element);
      if (Drupal.webform.isVisible($element)) {
        // Checkboxes and radios.
        $element.find('input[type=checkbox]:checked,input[type=radio]:checked').each(function () {
          value.push(this.value);
        });
        // Select lists.
        if (!value.length) {
          var selectValue = $element.find('select').val();
          if (selectValue) {
            if ($.isArray(selectValue)) {
              value = selectValue;
            }
            else {
              value.push(selectValue);
            }
          }
        }
        // Simple text fields. This check is done last so that the select list
        // in select-or-other fields comes before the "other" text field.
        if (!value.length) {
          $element.find('input:not([type=checkbox],[type=radio]),textarea').each(function () {
            value.push(this.value);
          });
        }
      }
    }
    else {
      switch ($.type(existingValue)) {
        case 'array':
          value = existingValue;
          break;

        case 'string':
          value.push(existingValue);
          break;
      }
    }
    return value;
  };

  /**
   * Utility function to calculate a second-based timestamp from a time field.
   */
  Drupal.webform.dateValue = function (element, existingValue) {
    var value = false;
    if (element) {
      var $element = $(element);
      if (Drupal.webform.isVisible($element)) {
        var day = $element.find('[name*=day]').val();
        var month = $element.find('[name*=month]').val();
        var year = $element.find('[name*=year]').val();
        // Months are 0 indexed in JavaScript.
        if (month) {
          month--;
        }
        if (year !== '' && month !== '' && day !== '') {
          value = Date.UTC(year, month, day) / 1000;
        }
      }
    }
    else {
      if ($.type(existingValue) === 'array' && existingValue.length) {
        existingValue = existingValue[0];
      }
      if ($.type(existingValue) === 'string') {
        existingValue = existingValue.split('-');
      }
      if (existingValue.length === 3) {
        value = Date.UTC(existingValue[0], existingValue[1], existingValue[2]) / 1000;
      }
    }
    return value;
  };

  /**
   * Utility function to calculate a millisecond timestamp from a time field.
   */
  Drupal.webform.timeValue = function (element, existingValue) {
    var value = false;
    if (element) {
      var $element = $(element);
      if (Drupal.webform.isVisible($element)) {
        var hour = $element.find('[name*=hour]').val();
        var minute = $element.find('[name*=minute]').val();
        var ampm = $element.find('[name*=ampm]:checked').val();

        // Convert to integers if set.
        hour = (hour === '') ? hour : parseInt(hour);
        minute = (minute === '') ? minute : parseInt(minute);

        if (hour !== '') {
          hour = (hour < 12 && ampm == 'pm') ? hour + 12 : hour;
          hour = (hour === 12 && ampm == 'am') ? 0 : hour;
        }
        if (hour !== '' && minute !== '') {
          value = Date.UTC(1970, 0, 1, hour, minute) / 1000;
        }
      }
    }
    else {
      if ($.type(existingValue) === 'array' && existingValue.length) {
        existingValue = existingValue[0];
      }
      if ($.type(existingValue) === 'string') {
        existingValue = existingValue.split(':');
      }
      if (existingValue.length >= 2) {
        value = Date.UTC(1970, 0, 1, existingValue[0], existingValue[1]) / 1000;
      }
    }
    return value;
  };

  /**
   * Make a prop shim for jQuery < 1.9.
   */
  $.fn.webformProp = $.fn.webformProp || function (name, value) {
    if (value) {
      return $.fn.prop ? this.prop(name, true) : this.attr(name, true);
    }
    else {
      return $.fn.prop ? this.prop(name, false) : this.removeAttr(name);
    }
  };

  /**
   * Make a multi-valued val() function.
   *
   * This is for setting checkboxes, radios, and select elements.
   */
  $.fn.webformVal = function (values) {
    this.each(function () {
      var $this = $(this);
      var value = $this.val();
      var on = $.inArray($this.val(), values) != -1;
      if (this.nodeName == 'OPTION') {
        $this.webformProp('selected', on ? value : false);
      }
      else {
        $this.val(on ? [value] : false);
      }
    });
    return this;
  };

  /**
   * Given a table's DOM element, restripe the odd/even classes.
   */
  Drupal.webform.restripeTable = function (table) {
    // :even and :odd are reversed because jQuery counts from 0 and
    // we count from 1, so we're out of sync.
    // Match immediate children of the parent element to allow nesting.
    $('> tbody > tr, > tr', table)
      .filter(':visible:odd').filter('.odd')
        .removeClass('odd').addClass('even')
      .end().end()
      .filter(':visible:even').filter('.even')
        .removeClass('even').addClass('odd');
  };

})(jQuery);
;
(function ($) {

Drupal.googleanalytics = {};

$(document).ready(function() {

  // Attach mousedown, keyup, touchstart events to document only and catch
  // clicks on all elements.
  $(document.body).bind("mousedown keyup touchstart", function(event) {

    // Catch the closest surrounding link of a clicked element.
    $(event.target).closest("a,area").each(function() {

      // Is the clicked URL internal?
      if (Drupal.googleanalytics.isInternal(this.href)) {
        // Skip 'click' tracking, if custom tracking events are bound.
        if ($(this).is('.colorbox') && (Drupal.settings.googleanalytics.trackColorbox)) {
          // Do nothing here. The custom event will handle all tracking.
          //console.info("Click on .colorbox item has been detected.");
        }
        // Is download tracking activated and the file extension configured for download tracking?
        else if (Drupal.settings.googleanalytics.trackDownload && Drupal.googleanalytics.isDownload(this.href)) {
          // Download link clicked.
          ga("send", {
            "hitType": "event",
            "eventCategory": "Downloads",
            "eventAction": Drupal.googleanalytics.getDownloadExtension(this.href).toUpperCase(),
            "eventLabel": Drupal.googleanalytics.getPageUrl(this.href),
            "transport": "beacon"
          });
        }
        else if (Drupal.googleanalytics.isInternalSpecial(this.href)) {
          // Keep the internal URL for Google Analytics website overlay intact.
          ga("send", {
            "hitType": "pageview",
            "page": Drupal.googleanalytics.getPageUrl(this.href),
            "transport": "beacon"
          });
        }
      }
      else {
        if (Drupal.settings.googleanalytics.trackMailto && $(this).is("a[href^='mailto:'],area[href^='mailto:']")) {
          // Mailto link clicked.
          ga("send", {
            "hitType": "event",
            "eventCategory": "Mails",
            "eventAction": "Click",
            "eventLabel": this.href.substring(7),
            "transport": "beacon"
          });
        }
        else if (Drupal.settings.googleanalytics.trackOutbound && this.href.match(/^\w+:\/\//i)) {
          if (Drupal.settings.googleanalytics.trackDomainMode !== 2 || (Drupal.settings.googleanalytics.trackDomainMode === 2 && !Drupal.googleanalytics.isCrossDomain(this.hostname, Drupal.settings.googleanalytics.trackCrossDomains))) {
            // External link clicked / No top-level cross domain clicked.
            ga("send", {
              "hitType": "event",
              "eventCategory": "Outbound links",
              "eventAction": "Click",
              "eventLabel": this.href,
              "transport": "beacon"
            });
          }
        }
      }
    });
  });

  // Track hash changes as unique pageviews, if this option has been enabled.
  if (Drupal.settings.googleanalytics.trackUrlFragments) {
    window.onhashchange = function() {
      ga("send", {
        "hitType": "pageview",
        "page": location.pathname + location.search + location.hash
      });
    };
  }

  // Colorbox: This event triggers when the transition has completed and the
  // newly loaded content has been revealed.
  if (Drupal.settings.googleanalytics.trackColorbox) {
    $(document).bind("cbox_complete", function () {
      var href = $.colorbox.element().attr("href");
      if (href) {
        ga("send", {
          "hitType": "pageview",
          "page": Drupal.googleanalytics.getPageUrl(href)
        });
      }
    });
  }

});

/**
 * Check whether the hostname is part of the cross domains or not.
 *
 * @param string hostname
 *   The hostname of the clicked URL.
 * @param array crossDomains
 *   All cross domain hostnames as JS array.
 *
 * @return boolean
 */
Drupal.googleanalytics.isCrossDomain = function (hostname, crossDomains) {
  /**
   * jQuery < 1.6.3 bug: $.inArray crushes IE6 and Chrome if second argument is
   * `null` or `undefined`, https://bugs.jquery.com/ticket/10076,
   * https://github.com/jquery/jquery/commit/a839af034db2bd934e4d4fa6758a3fed8de74174
   *
   * @todo: Remove/Refactor in D8
   */
  if (!crossDomains) {
    return false;
  }
  else {
    return $.inArray(hostname, crossDomains) > -1 ? true : false;
  }
};

/**
 * Check whether this is a download URL or not.
 *
 * @param string url
 *   The web url to check.
 *
 * @return boolean
 */
Drupal.googleanalytics.isDownload = function (url) {
  var isDownload = new RegExp("\\.(" + Drupal.settings.googleanalytics.trackDownloadExtensions + ")([\?#].*)?$", "i");
  return isDownload.test(url);
};

/**
 * Check whether this is an absolute internal URL or not.
 *
 * @param string url
 *   The web url to check.
 *
 * @return boolean
 */
Drupal.googleanalytics.isInternal = function (url) {
  var isInternal = new RegExp("^(https?):\/\/" + window.location.host, "i");
  return isInternal.test(url);
};

/**
 * Check whether this is a special URL or not.
 *
 * URL types:
 *  - gotwo.module /go/* links.
 *
 * @param string url
 *   The web url to check.
 *
 * @return boolean
 */
Drupal.googleanalytics.isInternalSpecial = function (url) {
  var isInternalSpecial = new RegExp("(\/go\/.*)$", "i");
  return isInternalSpecial.test(url);
};

/**
 * Extract the relative internal URL from an absolute internal URL.
 *
 * Examples:
 * - https://mydomain.com/node/1 -> /node/1
 * - https://example.com/foo/bar -> https://example.com/foo/bar
 *
 * @param string url
 *   The web url to check.
 *
 * @return string
 *   Internal website URL
 */
Drupal.googleanalytics.getPageUrl = function (url) {
  var extractInternalUrl = new RegExp("^(https?):\/\/" + window.location.host, "i");
  return url.replace(extractInternalUrl, '');
};

/**
 * Extract the download file extension from the URL.
 *
 * @param string url
 *   The web url to check.
 *
 * @return string
 *   The file extension of the passed url. e.g. "zip", "txt"
 */
Drupal.googleanalytics.getDownloadExtension = function (url) {
  var extractDownloadextension = new RegExp("\\.(" + Drupal.settings.googleanalytics.trackDownloadExtensions + ")([\?#].*)?$", "i");
  var extension = extractDownloadextension.exec(url);
  return (extension === null) ? '' : extension[1];
};

})(jQuery);
;
(function ($) {

Drupal.behaviors.openid = {
  attach: function (context) {
    var loginElements = $('.form-item-name, .form-item-pass, li.openid-link');
    var openidElements = $('.form-item-openid-identifier, li.user-link');
    var cookie = $.cookie('Drupal.visitor.openid_identifier');

    // This behavior attaches by ID, so is only valid once on a page.
    if (!$('#edit-openid-identifier.openid-processed').length) {
      if (cookie) {
        $('#edit-openid-identifier').val(cookie);
      }
      if ($('#edit-openid-identifier').val() || location.hash == '#openid-login') {
        $('#edit-openid-identifier').addClass('openid-processed');
        loginElements.hide();
        // Use .css('display', 'block') instead of .show() to be Konqueror friendly.
        openidElements.css('display', 'block');
      }
    }

    $('li.openid-link:not(.openid-processed)', context)
      .addClass('openid-processed')
      .click(function () {
         loginElements.hide();
         openidElements.css('display', 'block');
        // Remove possible error message.
        $('#edit-name, #edit-pass').removeClass('error');
        $('div.messages.error').hide();
        // Set focus on OpenID Identifier field.
        $('#edit-openid-identifier')[0].focus();
        return false;
      });
    $('li.user-link:not(.openid-processed)', context)
      .addClass('openid-processed')
      .click(function () {
         openidElements.hide();
         loginElements.css('display', 'block');
        // Clear OpenID Identifier field and remove possible error message.
        $('#edit-openid-identifier').val('').removeClass('error');
        $('div.messages.error').css('display', 'block');
        // Set focus on username field.
        $('#edit-name')[0].focus();
        return false;
      });
  }
};

})(jQuery);
;
/*globals jQuery, Drupal, require, define, Modernizr*/
/**
 * IGA Webform customizations
 */
define("IGA.common.webform", ["jquery", "IGA.events"], function($, events){
	"use strict";
	var Webform = {
		//## Convert Drupal datepicker into a simple html5 date field.
		dateInput: function(index, el, suffix){
			var $date = $(el),
				$datepicker = $date.find(".webform-container-inline, .container-inline, .container-inline-date" ),
				$day = $datepicker.find("select.day, select.date-day, input.day, select[name$=\"[day]\"]"),
				$month = $datepicker.find("select.month, select.date-month, input.month, select[name$=\"[month]\"]"),
				$year = $datepicker.find("select.year, select.date-year, input.year, select[name$=\"[year]\"]"),
				name = ($month.attr("name") || "").split("[")[0],
				$input;
			suffix = suffix || "iga";
			$input = $date.find("input[type=date]");
			if($input.length === 0){
				$input = $('<input class="iga-common-webform-date" type="date">');
			}else{
				$input.addClass("iga-common-webform-date").show();
			}
			if(name !== ""){
				// If the input is provided then we're using it to submit, update the name. It can't conflict w/ the Drupal form field.
				$input.attr("name", name +"."+suffix);
			}

			$datepicker.hide().after($input);
			$input.on("change", function(){
				//### When the date input is updated
				var date = $input.val().split("-"), //yy-mm-dd regardless of user display
					year = date[0],
					month = date[1],
					day = date[2];
				if(month){ $month.val(month.replace(/^0/,'')); }
				if(day){ $day.val(day.replace(/^0/,'')); }
				if(year){ $year.val(year); }
			});
			//### Initialize the date input with the datepicker
			var day = $day.val(),
				month = $month.val(),
				year = $year.val();
			if(day && day.length === 1){ day = "0"+day; }
			if(month && month.length === 1){ month = "0"+month; }
			if(year && year !== "" && day !== "" && month !== ""){
				require(["IGA.utils"], function(utils){
					var _date = year+"-"+month+"-"+day,
						now = new Date();
					// Turn off input initialization if the date is set to today / the default
					if(utils.dateFormat(now.getTime() + now.getTimezoneOffset() * 60000, 'yyyy-mm-dd') !== _date){
						$input.val(_date);
					}
				});
			}
			var autocomplete = $month.attr("autocomplete");
			if(autocomplete && autocomplete.indexOf("bday") === 0){
				$input.attr("autocomplete", "bday");
			}
		},
		//## Add autocomplete attributes to date selects.
		dobAutoComplete: function(index, el){
			var $date = $(el),
				$datepicker = $date.find(".webform-container-inline"),
				$day = $datepicker.find("select.day, select.date-day"),
				$month = $datepicker.find("select.month, select.date-month"),
				$year = $datepicker.find("select.year, select.date-year, input.year"),
				autocomplete = $datepicker.find("select.month").attr("autocomplete");
			if(autocomplete && autocomplete.indexOf("bday") === 0){
				$day.attr("autocomplete", "bday-day");
				$month.attr("autocomplete", "bday-month");
				$year.attr("autocomplete", "bday-year");
			}

		},
		//## Apply phone number field formatting.
		phoneInput: function(index, el){
			var $el = $(el);
			require(["jquery", "jquery/formance/jquery.formance.min"], function($){
				$el.formance('format_phone_number');
			});
		},
		//## Auto-fill form based on user profile.
		updateUser: function($webform, user, ae_user){
			var $email = $webform.find("input.email"),
				$firstname = $webform.find("input[autocomplete='given-name']"),
				$lastname = $webform.find("input[autocomplete='family-name']"),
				$dob = $webform.find("input[autocomplete='bday']"),
				$dob_select = $webform.find(".webform-component-date select[autocomplete='bday-year'], .webform-component-date input[autocomplete='bday-year']"),
				$zip = $webform.find("input[autocomplete='postal-code']"),
				$city = $webform.find("input[autocomplete='address-level2']"),
				$state = $webform.find("input[autocomplete='address-level1']"),
				$country = $webform.find("input[autocomplete='country'], select[autocomplete='country']");

			user = user || {};
			ae_user = ae_user || user.ae_user || {data:{}};

			if($email.length > 0 && !$email.val()){
				$email.val(user.mail || ae_user.data.Email);
			}
			if($firstname.length > 0 && !$firstname.val()){
				$firstname.val(user.field_first_name || ae_user.data.FirstName);
			}
			if($lastname.length > 0 && !$lastname.val()){
				$lastname.val(user.field_last_name || ae_user.data.LastName);
			}

			if($dob.length > 0 || $dob_select.length > 0){
				var dob = null;
				if(user.field_birthday){
					dob = user.field_birthday.split(' ');
					if(dob.length > 0){ dob = dob[0]; }
				}
				dob = dob || ae_user.data.BirthDate || "";
				if($dob.length > 0 && !$dob.val()){
					$dob.val(dob).trigger('change');
				}else if($dob_select.length > 0){
					$dob_select = $dob_select.closest(".webform-component-date ");
					var $day = $dob_select.find("select.day"),
						$month = $dob_select.find("select.month"),
						$year = $dob_select.find("select.year, input.year"),
						dobArr = dob.split("-");
					if(dobArr.length === 3){
						var year = dobArr[0], month = dobArr[1], day = dobArr[2];
						$year.val(year);
						$month.val(month.replace(/^0/,''));
						$day.val(day.replace(/^0/,''));
					}
				}
			}
			var user_address = user.field_user_address || {};
			if($zip.length > 0 && !$zip.val()){
				$zip.val(user_address.postal_code || ae_user.data.PostCode);
			}
			if($city.length > 0 && !$city.val()){
				$city.val(user_address.city || ae_user.data.City);
			}
			if($state.length > 0 && !$state.val()){
				$state.val(user_address.state || ae_user.data.State).trigger("change");
			}
			if($country.length > 0 && !$country.val()){
				$country.val(user_address.country || ae_user.data.CountryCode).trigger("change");
			}
		},
		countryCASL: function($webform){
			var $country = $webform.find('select[name="submitted[country]"], select[name="submitted[address][country]"], select[autocomplete^="country"]');
			$country.on("change", function(){
				var $this = $(this), country = $this.val();
				events.trigger("country.manual", [country]);
			});
		}
	};
	return Webform;
});

(function(jQuery) {
	"use strict";
	// # Drupal Behaviors
	var dsicw = Drupal.settings.iga_common_webform || {};
	Drupal.behaviors.iga_common_webform = {
		attach: function(context, settings){
			require(["jquery", "IGA.events", "IGA.common.webform"], function($, events, Webform){
				var $context = $(context)

				//### Update form values for logged in users when:
				require(["IGA.user"], function(user){
					var formSelector = "form.webform-client-form.iga-common-webform";
					$context.find(formSelector).addBack(formSelector).once("iga-common-webform", function(){
						var $webform = $(this),
							nid = $webform.attr("data-nid"),
							settings = dsicw["nid-"+nid] || {};

						if (Modernizr && Modernizr.inputtypes.date && settings.html5_date){
							// Add HTML5 date input if it is available;
							$webform.find(".webform-component-date").once("iga-common-webform", Webform.dateInput);
						}else{
							// otherwise, at least add autocomplete date to the select
							$webform.find(".webform-component-date").once("iga-common-webform", Webform.dobAutoComplete);
						}
						$webform.find("#webform-component-phone-number input").once("iga-common-webform", Webform.phoneInput);

						if(user.uid){
							// the user is logged in,
							Webform.updateUser($webform, user);
						}else{
							events.on("login", function(user, data){
								// once the user has logged in,
								Webform.updateUser($webform, user, data ? data.ae_user : null);
							});
						}
						function ae_user(ae_user, state, sso){
							var dbae = Drupal.behaviors.ae_social_login || {};
							// or when the user is logged into AE.
							Webform.updateUser($webform, null, ae_user);
						}

						events.on("ae_user", ae_user).replay("ae_user", ae_user);
						events.on("ae_login", ae_user).replay("ae_login", ae_user);

						// ### CASL
						Webform.countryCASL($webform);

					});
				});
			});
		}
	};

})(jQuery);;
/**
 * @file Twitter, Facebook, and Google+ social scripts and GA Event tracking
 */

(function(){
	"use strict";
	// # Social Scripts

	// ## Google Analytics Event Tracking
	var __icsaStart = Date.now(),
		ga = (typeof window.ga === "undefined") ? function(){} : window.ga;
	var attachGAEvents =
	IGA.social = {
		attach: {
			facebook: function(FB){
				if(IGA.social.fbAttached){ return; }else{ IGA.social.fbAttached = true; }
				FB.Event.subscribe('edge.create',
					function(href, widget) {
						//when a user has liked a url.
						ga("send", "event", "Social", "facebook.like", href );
					}
				);
				FB.Event.subscribe('edge.remove',
					function(href, widget) {
						//when a user has unliked a url.
						ga("send","event", "Social", "facebook.unlike", href );
					}
				);
				FB.Event.subscribe('message.send',
					function(href) {
						//when a user has used the send button.
						ga("send", "event", "Social", "facebook.message.send", href );
					}
				);
				ga('send', 'timing', 'Facebook', 'fbAsyncInit', Date.now() - __icsaStart);
			},
			googleplus: function(){
				if(IGA.social.gpAttached){ return; }else{ IGA.social.gpAttached = true; }
				IGA.onYtEvent = function(payload){
					if (payload.eventType === 'subscribe') {
						ga("send", "event", "Social", "youtube.subscribe", payload.channelExternalId );
					} else if (payload.eventType === 'unsubscribe') {
						ga("send","event", "Social", "youtube.unsubscribe", payload.channelExternalId );
					}
				};

				window.googleplusone_callback = function (data){//{"href": target URL, "state": "on"|"off" }
					ga("send", "event", "Social", "googleplus.plusone"+((data.state === "off")?".off":""), data.href );
				};
				ga('send', 'timing', 'Googleplus', 'gplusLoad', Date.now() - __icsaStart);
			},
			twitter: function(twttr){
				if(IGA.social.twAttached){ return; }else{ IGA.social.twAttached = true; }
				var event_names = {
					"click" :   "" ,// Track first interaction click
					"tweet" :  "",
					"retweet" : "source_tweet_id",
					"follow" : "screen_name",
					"favorite" : "tweet_id"
				};
				function trackIntent(intent_event){
					if(intent_event){
						var label = intent_event.type==="click" ? intent_event.region : (intent_event.data) ? intent_event.data[event_names[intent_event.type]] : "";
						ga("send", "event", "Social", "twitter." + intent_event.type, label);
					}
				}
				for(var event_name in event_names){
					if(event_names.hasOwnProperty(event_name)){
						twttr.events.bind(event_name, trackIntent);
					}
				}
				ga('send', 'timing', 'Twitter', 'twttr.ready', Date.now() - __icsaStart);
			}
		}
	};
})();;
/**
 *
 */
//# Main Carousel Banner Analytics Tracking
define("bolero.slickAnalytics", ["jquery", "underscore", "IGA.events", "bolero.analytics", "googleanalytics", "jquery/plugins/jquery.viewport.min"],
	function($, _, events, boleroAnalytics){
	"use strict";
	function SlickAnalytics(el){
		this.$el = $(el);
		this.$slides = [];
		this.noDupes = {};
		var $el = this.$el, name = "NONE", eventId = "slick";
		if($el.is(".l-banner .l-region--banner")){
			name = "Banner";
			eventId = "banner";
		}else if($el.is(".view")){
			name = $el.attr("data-view-name");
			eventId = "view-"+$el.attr("data-view-id")+"--"+$el.attr("data-view-display-id");
		}
		this.name = name;
		this.eventId = eventId;
		this.initialized = false;
		this.viewed = [];
	}

	SlickAnalytics.prototype.init = function(slider){
		var self = this;
		this.slider = slider;
		this.$slides = slider.$slides;
		this.trackClicks();
		var _trackViews = _.bind(this.trackViews, this);
		IGA.events.on("bolero."+this.eventId+".beforechange", function(){ self.noDupes = {}; });//clear out duplicate detection buffer
		IGA.events.on("bolero."+this.eventId+".afterchange", _trackViews);
		if(!this.initialized){
			_.defer(_trackViews);
		}
		$(window).on("scroll", _.debounce(_trackViews, 250));
		if(this.$slides){
			this.$slides.not(".slick-cloned, .bolero-sa-initialized").addClass("bolero-sa-initialized");
		}
		this.initialized = true;
	};

	 function _findOriginalSlide($clone, $slides){
		var classes = $clone[0].className.replace("slick-cloned", "").trim(),
			slideSelector = "."+classes.split(/\s+/).join("."), //let's get all the classes into a selector
			$originalSlide = $slides.filter(slideSelector).first();
		//here it is, use this slide index instead.
		return $originalSlide;
	}

	SlickAnalytics.prototype.trackViews = function(){
		var self = this,
			_slideZTop = 0;
		if(!this.$slides){ return; }
		_.each(this.$slides, function(el){
			var _z = parseInt(el.style["z-index"]);
			if(_z > _slideZTop){ _slideZTop = _z; }
		});

		this.$slides.siblings().each(function(i){//.not(".slick-cloned")
			var $this = $(this),
				$slide = $this,
				$node = $slide.children(".node"),
				z_index = parseInt(this.style["z-index"] || 0),
				offset = $this.offset(),
				$container = $this.parent().parent(),
				container_offset = $container.offset(),
				container_width = $container.width();
			//## Track which slides have been seen
			if( z_index >= _slideZTop && $this.is(":visible") && //not faded out or display:none
				$.inviewport($this, { threshold: -100 }) && !$.leftofscreen($this, {threshold: 100}) && //on the screen
				offset.left - container_offset.left >= 0 && offset.left - container_offset.left < container_width && //in the container
				!self.noDupes[i])
			{
				//To count slides must be on the top of the z-index, visible, within the viewport, and within the container.
				if($this.is(".slick-cloned")){
					//... but what is the actual, not-cloned slide?
					$slide = _findOriginalSlide($this, self.$slides);
				}
				var slide_num = _.indexOf(self.$slides, $slide[0]) + 1,
					ga_label = boleroAnalytics.label($node) || "slide-"+slide_num,
					timing = Date.now() - boleroAnalytics.start;// track when the node was viewed
				self.noDupes[i] = true;
				//Track that the banner at this index has been seen.
				if(!self.viewed[slide_num]){ ga("send", "event", "Carousel : " + self.name, "impression", ga_label, timing, {nonInteraction: 1}); }
				self.viewed[slide_num] = true;
				//TODO add nodeID tracking when using DS.
			}
		});
	};

	SlickAnalytics.prototype.trackClicks = function(){
		//## Track clicks on slides
		var self = this;
		if(!this.$slides){ return; }
		this.$slides.siblings().not(".bolero-sa-initialized").each(function(i){
			// that haven't already been initialized
			$(this).one("click", function(){
				var $this = $(this),
					$slide = $this,
					$node = $slide.children(".node");
				if($this.is(".slick-cloned")){
					//... but what is the actual, not-cloned slide?
					$slide = _findOriginalSlide($this, self.$slides);
				}
				var slide_num = _.indexOf(self.$slides, $slide[0]) + 1,
					ga_label = boleroAnalytics.label($node)|| "slide-"+slide_num;
				ga("send", "event", "Carousel : " + self.name, "click", ga_label, 1);
			});
		});
	};

	return SlickAnalytics;
});;
/*globals require, requirejs, define, jQuery, Drupal, IGA */
define("bolero.form", ["jquery", "underscore", "Drupal.ajax"], function ($, _) {
	"use strict";
	function BoleroForm($container, form_id, data, settings) {
		//TODO change settings.useAjax -> settings.ajaxLoad
		this.data = data || {};
		this.settings = settings || {};
		//TODO if $container.is("form") wrap it.
		if($container.is("form")){
			if(!$container.parent().is(".bolero-ajax-form-wrapper")){
				$container.parent().addClass("bolero-ajax-form-wrapper");
			}
			$container = $container.parent();
		}else if(!$container.is(".bolero-ajax-form-wrapper")){
			$container.addClass("bolero-ajax-form-wrapper");
		}
		//Check the registry for existing forms
		this.$container = $container;
		if(!form_id){
			form_id = $container.attr("data-bolero-form-id");
		}
		this.$form = $container.children("form");

		if(this.$form.length > 0){
			if(!form_id){
				form_id = this.$form.find("input[name=form_id]").val();
			}
			this.setupForm();
		}
		if(BoleroForm.registry[form_id]){
			var bf = BoleroForm.registry[form_id];
			if(data){ bf.data = data; }
			_.extend(bf.settings, settings);
			return bf;
		}
		this.form_id = form_id;
		this.endpoint = "/api/bolero/form/"+form_id;
		this.ajax = new Drupal.ajax(null, $container, { url: this.endpoint });
		this.initSettings();
		//TODO use form_build_id ?

		BoleroForm.registry[form_id] = this;
		return this;
	}

	BoleroForm.registry = [];

	BoleroForm.prototype.delete = function(){
		delete BoleroForm.registry[this.form_id];
		this.$container.remove();
	};

	BoleroForm.prototype.load = function(reload){
		if(reload === true){
			this.$form.remove();
		}
		if(this.$form.length === 0){
			return this.get();
		}else{
			var deferred = $.Deferred();
			deferred.resolve(false);
			//return a jQuery promise to mimic $.ajax().done()
			return deferred.promise();
		}
	};

	BoleroForm.prototype.request = function(endpoint){
		endpoint = this.endpoint + (endpoint || "");
		if(this.inProgress){ return $.Deferred().promise(); }
		var self = this,
			postData = this.$form.serializeArray() || [];
		//add ajax_page_state to allow drupal_add_js/css ajax to work.
		_.each(["css", "js"], function(type){
			if(Drupal.settings.ajaxPageState){
				for(var key in Drupal.settings.ajaxPageState[type]) {
					postData.push({name:"ajax_page_state["+type+"]["+key+"]", value: 1});
				}
			}
		});
		//Drupal forms use non-unique ids with an id--# suffix so we must pass all of the existing elements
		//@see misc/ajax.js : Drupal.ajax.prototype.beforeSerialize
		var html_ids = _.reduce($('[id]'), function(ids, el){
			ids.push(el.id);
			return ids;
		}, []);
		postData.push({name:"ajax_html_ids[]", value: html_ids});
		//TODO
		//options.data['ajax_page_state[theme]'] = Drupal.settings.ajaxPageState.theme;
		//options.data['ajax_page_state[theme_token]'] = Drupal.settings.ajaxPageState.theme_token;

		for(var key in this.data) {
			postData.push({name:key, value: this.data[key]});
		}

		var has_triggering_element = false;
		for(var data in postData){
			if(data.name === '_triggering_element_name'){
				has_triggering_element = true;
			}
		}
		if(!has_triggering_element && self.settings[this.formSubmitId] && self.settings[this.formSubmitId].submit){
			var tEN = self.settings[this.formSubmitId].submit._triggering_element_name;
			if(tEN){
				postData.push({ name:"_triggering_element_name", value: tEN });
			}
		}

		this.inProgress = true;
		return $.ajax({
			type: 'POST',
			url: endpoint,
			data: postData
		}).always(function(){ self.inProgress = false; });
	};

	BoleroForm.prototype.get = function(endpoint){
		return this.request(endpoint).done(_.bind(this.insert, this));
	};

	BoleroForm.prototype.rebuild = function(){
		return this.get("/rebuild");
	};

	BoleroForm.prototype.validate = function(){
		this.submitText();
		return this.get("/validate");
	};

	BoleroForm.prototype.submit = function(){
		var self = this;
		this.submitText();
		if(this.settings.useAjax === false){
			var form = this.$form[0];
			form.action = location.pathname;
			form.submit();
		}else if(this.settings.ajax && this.settings.ajaxSubmit){
			//if there are ajax settings for this form then submit it
			this.$form.ajaxSubmit({
				success: function(response, status){
					self.insert(response, status);
					self.$form.removeClass("state--submitting");
				}
			});
		}else{
			//otherwise, use the bolero ajax form submit
			return this.get("/submit").done(function(){
				self.$form.removeClass("state--submitting");
			});
		}
	};

	BoleroForm.prototype.submitText = function(){
		var self = this;
		this.$form.addClass("state--submitting");
		if(this.$formSubmit){
			if(!this._submitAttached){
				var defaultText = this.$formSubmit.val();
				this.$form.on("submitted validated error", function(){
					self.$form.removeClass("state--submitting");
					self.$formSubmit.val(defaultText);
				});
				this._submitAttached = true;
			}
			this.$formSubmit.val(this.settings.submitText || "Submitting...");
		}

	};

	BoleroForm.prototype.insert = function(response, status){
		var data, settings;
		for(var i = 0; i< response.length; i++){
			data = response[i];
			if(data.command === "settings"){ settings = data.settings; }
			if(data.settings && data.settings.bolero_form === true ){
				data.selector = this.$container;
				//merge in the settings b/c they aren't available until the end of ajax_render
				data.settings = $.extend(data.settings, settings);
				//insert and Drupal.attachBehaviors
				this.ajax.commands.insert(this.ajax, data, status);
				this.$form = this.$container.children("form");
				this.setupForm(settings);
			}else if(data){
				data.selector = data.selector || this.$form;
				if(typeof this.ajax.commands[data.command] === "function"){
					if(data.command === "invoke" && data.method === "trigger"){
						// Wait for the form done callback before triggering events.
						_.defer(function(data, ajax){
							ajax.commands[data.command](ajax, data, status);
						}, data, this.ajax);
					}else{
						this.ajax.commands[data.command](this.ajax, data, status);
					}
				}
			}
		}
		this.initSettings(settings);
	};

	//## When we have a form
	BoleroForm.prototype.setupForm = function(){
		var self = this;
		this.$formSubmit = this.$form.find(".form-submit");
		this.formSubmitId = (this.$formSubmit.length) ? this.$formSubmit[0].id : null;
		//override Drupal ajaxSubmit
		this.$formSubmit.each(function(){
			var $formSubmit = $(this),
				ajax = Drupal.ajax[this.id];
			$formSubmit.once("bolero-form", function(){
				$formSubmit.on("click", function(e){
					//If there are events bound to the form submit
					var events = $._data(self.$form[0], "events");
					if(events && events.submit){
						// trigger them
						var fe = $.Event("submit");
						self.$form.trigger(fe);// submit.bolero.formSubmit
						if(!fe.isPropagationStopped() && ajax){
							// and continue or allow submit event handlers to prevent ajaxSubmit
							ajax.eventResponse(this, e);
						}
					}else{
						if(!self.settings.ajaxSubmit){
							self.submit();
						}else if(ajax){
							ajax.eventResponse(this, e);
						}
					}
				}).addClass("ajax-processed");
				if(Drupal.ajax[this.id]){
					$formSubmit.off("mousedown");
					//delete Drupal.ajax[this.id];
				}
			});
		});
	};

	BoleroForm.prototype.initSettings = function(){
		var self = this;
		this.settings = this.settings || {};
		if(this.$form.length > 0){
			this.$formSubmit.each(function(){
				var submit_id = this.id;
				self.settings.ajax = false;
				self.settings.ajaxSubmit = false;
				if(Drupal.settings.ajax && Drupal.settings.ajax[submit_id]){
					self.settings[submit_id] = Drupal.settings.ajax[submit_id];
					self.settings.ajax = true;
					//by default use the Bolero form submit instead b/c it has better error handling w/ events.
					self.settings.ajaxSubmit = self.settings.ajaxSubmit || false;
				}
			});
		}
		return this.settings;
	};

	return BoleroForm;
});
;
/**
 * @file bolero.user_login.js
 */
/*globals require, requirejs, define, jQuery, Drupal, IGA, aeJS */
// # Drupal Behaviors
(function($){
  "use strict";
  var $block = $("#block-bolero-user-login-user-login-modal"),
      dbae = Drupal.behaviors.ae_social_login,
      dsae = Drupal.settings.ae_social_login || { settings:{} },
      dsbul = Drupal.settings.bolero_user_login || {},
      dbbul = Drupal.behaviors.bolero_user_login = {
        login_selectors: "a.user-login.bolero-modal, a[href*='user/login'], a.user-login-link",
        ae_login_selectors: "a.ae-register-link[data-ae-register-link], a.ae-register-link[data-ae-login-link], a.ae-register-link[data-ae-auth-link]",
        // TODO figure out how to remove this...
        stopPropagation_selectors: "body.not-logged-in form.node-post-form .form-actions .form-submit",
        modal_selectors: function(){ return [dbbul.login_selectors, dbbul.stopPropagation_selectors].join(", "); },
        all_selectors: function(){ return [dbbul.login_selectors, dbbul.stopPropagation_selectors, dbbul.ae_login_selectors].join(", "); },
        // ## Attach Behavior
        attach:function(context, settings){
          if(context !== document){ dbbul.attachLinks(context); }

          $(dbbul.all_selectors(), context).once("bul-attach", function(){
            var $link = $(this),
                $node = $link.closest(".node[data-nid], .bolero-clearing-content, .clearing-caption"),
                isInline = $node.is(".node:not(.node--full), .bolero-clearing-content, .clearing-caption"),
                nid = $node.attr("data-nid"),
                title = $node.attr("data-title"),
                url = $node.attr("data-alias"),
                isMobile = dsae && dsae.settings? !dsae.settings.auth_window : false;
            // Update Login / Connect text
            require(["IGA.user"], function(user){
              if(user.uid){
                $link.addClass("state--connect");
                $link.find(".auth-action").text("Connect");
              }
            });

            //### Track login source node
            require(["bolero.user_login", "underscore", "IGA.events"], function(bul, _, events){
              isMobile = dsbul.isMobile;
              events.on("ae_mobile_detect", function(){ isMobile = true; });
              // TODO will this get fired with stopImmediatePropagation
              // TODO potential issue with ae_ready after attachLinks
              var provider;
              if($link.is(dbbul.ae_login_selectors)){
                provider = $link.attr("data-ae-register-link");
              }
              $link.on("click mousedown", function(){
                _.defer(function(){
                  if(nid){ bul.data.nid = nid; }
                  if(title){ bul.data.title = title; }
                  if(provider){ bul.data.provider = provider; }
                  if(url && isInline){
                    bul.data.redirect_url = url;
                    // For mobile, tell AE to redirect to the specified url.
                    if(isMobile && aeJS){
                      aeJS.settings.return_url = url;
                      events.once("bolero.user_login.close", function(){
                        dsbul.clear_return_url();
                        events.off("ae_window", dsbul.clear_return_url);
                      }).once("ae_window", function(state){
                        if(state.state === "closed"){
                          dsbul.clear_return_url();
                          events.off("bolero.user_login.close", dsbul.clear_return_url);
                        }
                      });
                    }
                  }
                });
              });
            });
          });
        },
        clear_return_url: function(){ aeJS.settings.return_url = ""; },
        // ## Attach to login links
        attachLinks: function(context){
          // ### Attach Regular modal open links
          $(dbbul.login_selectors, context).once("bul", function(){
            var $link = $(this);
            $link.on("click", function(e){
              var cp = $link.attr("data-campaign");
              cp = cp ? cp : "user login";
              IGA.setConversion(cp);
              e.preventDefault();
              IGA.drupal.login();
            });
          });

          if(context === document && dbae){
            require(["IGA.events"], function(events){
              events.on("ae_user_cancelled", dbae.clearTriggeringElement);
            });
          }

          function openEmailSubscriptionModal($this, cp){
            var $lists = $this.closest(".bolero--login-buttons").siblings(".bolero-login-buttons--subscription-lists");
            require(["EmailSubscription"], function(ES){
              // If opted out or closed then don't open the modal
              if(!ES.isSubscribedToLists($lists)){
                ES.modal.open(null, { campaign: cp });
              }
            });
          }

          // ### Attach to AE login links
          $(dbbul.ae_login_selectors, context).once("bul",function(){
            var $link = $(this), link = this, cp = $link.attr("data-campaign");

            $link.on("ae_login", function(e, $el, ae_user, type, sso){
              var remoteOnly = dbae.remoteOnly;
              require(["IGA.events"], function(events){
                function boleroLoginComplete(){
                  // ## Show Email opt-in modal after remote-only login.
                  if($link.is("a[data-remote-only][data-subscription-list-optin]")){
                    openEmailSubscriptionModal($link, cp);
                  }
                }
                events.trigger("element_ae_login",  [$el, ae_user, type, sso]);
                if (remoteOnly){
                  events.once("bolero.remote_login", boleroLoginComplete).replay("bolero.remote_login", boleroLoginComplete);
                }else{
                  boleroLoginComplete();
                }
              });
            });

            function ae_attach_link(){
              // Initialize the AE JS on this link if not initially on the page.
              if(context !== document){ aeJS.trigger.attach(link); }
              $link.on("click", function(){
                if(!$link.is("a[data-remote-only]")){
                  cp = cp ? cp : "ae-register-link";
                  IGA.setConversion(cp, true);
                }else{
                  dbae.setRemoteOnly();
                }
                dbae.setTriggeringElement($link);
              });
              // move our click handler before the AE click handler.
              var _events = $._data($link[0], "events");
              _events.click.unshift(_events.click.pop());
            }

            require(["IGA.events"], function(events){
              events.on("ae_ready", ae_attach_link).replay("ae_ready", ae_attach_link);
            });
          });
        }
      };

  // Initialize links before $.ready
  dbbul.attachLinks(document);

  // # Initialize
  require(["jquery", "bolero.user_login", "IGA.events", "IGA.user", "googleanalytics"], function($, bul, events, user){
    function last_login_service(user){
      var service = null;
      for(var s in user.services){
        if(!service || user.services[s].LastLogin > service.LastLogin){
          service = user.services[s];
        }
      }
      return service;
    }

    // ## AE Login Analytics
    function ae_ready(){
      aeJS.events.onWindow.addHandler(function(state){
        if(state.state === "opened"){
          bul.data = {};
          ga("send", "event", "AE Connect", "opened", state.service, null);
        }else if(state.state === "closed"){
          var is_user_cancelled = !aeJS.user.services;
          if(!is_user_cancelled){
            var connected = false;
            for(var s in aeJS.user.services){
              var service = aeJS.user.services[s];
              if(service.Service.toLowerCase() === state.service){
                connected = true;
                break;
              }
            }
            if(!connected){ is_user_cancelled = true; }
          }
          if(is_user_cancelled){
            // If the window is closed and the user isn't connected, consider it an permission refusal.
            ga("send", "event", "AE Connect", "user_cancelled", state.service, null, { nonInteraction: false });
            events.trigger("ae_user_cancelled", [aeJS.user]);
          }
        }
      });
      aeJS.events.onFlow.addHandler(function(state){
        var action = state.step, label = null, ni = true;
        if(state.step === "error"){
          if(state.error.indexOf("denied" > 0)){
            action = "user_denied"; ni = false;
          }else{
            action = "error."+state.error;
          }
        }else if(state.step === "authenticate"){
          bul.ae_login_start = Date.now();//TODO mobile timing through redirect?
        }
        if(state.service){ label = state.service; }
        ga("send", "event", "AE Connect", action, label, null, { nonInteraction: ni });
      });
      aeJS.events.onLogout.addHandler(function(){
        ga("send", "event", "AE Connect", "logout", null, null);
      });

      function ae_login(user, type, sso){
        var service = last_login_service(user),
            provider = service ? service.Service : null;
        if(sso){
          //bul.setOptOut({ $form: $("form#bolero-user-login") });
          ga("send", "event", "AE Connect", "sso", provider, null, { nonInteraction: true });
        }else{
          // login | register
          //TODO conversionPt as dimension5 / campaign
          ga("send", "event", "AE Connect", type, provider, null);
          if(bul.ae_login_start){
            ga('send', 'timing', 'Appreciation Engine', 'ae_login_'+service, Date.now() - bul.ae_login_start, 'AE');
          }
        }
        // Check if there is an element tracked as the source of this link.
        if(dbae){
          var $el = dbae.getTriggeringElement();
          if($el && $el.is(dbbul.ae_login_selectors)){ $el.trigger("login", [ $el, user, type, sso ]); }
        }
      }
      function ae_user(user, state){
        if(state === 'init' && IGA.user.uid && dsae.redirect_login){
          var service = last_login_service(user),
              provider = service ? service.Service : null,
              country = user.data.CountryCode;
          if(dsae.redirect_required_fields){
            var label = (dsae.redirect_required_fields === 'valid') ? 'skip' : 'opened';
            ga("send", "event", "AE Connect", "required_fields", label, null);
          }
          //TODO We can't determine login vs. registration
          ga("send", "event", "AE Connect", "login", provider, null);
          if(!country && user.data.GeoCountry){ country = user.data.GeoCountry; }
          if(country){ events.trigger("country.detect", [country]); }

          events.trigger("login", [IGA.user, { ae_user: user, provider: provider, redirect: true }]);
        }
      }

      events.on("ae_login", ae_login).replay("ae_login", ae_login);
      events.on("ae_user", ae_user).replay("ae_user", ae_user);
    }
    events.on("ae_ready", ae_ready).replay("ae_ready", ae_ready);
    bul.init();

    events.on("optout.default", bul.actions.casl).replay("optout.default", bul.actions.casl);
  });


//# Bolero User Login
define("bolero.user_login", ["jquery", "underscore", "IGA.events", "IGA.user", "googleanalytics"], function($, _, events, iga_user){
    "use strict";
	// module scope static vars
	var $forms = $("#block-bolero-user-login-user-login-modal"),
		$ae_reg_forms = $('form#user-login, form#user-register-form, form#ae-required-fields'),
		dbae = Drupal.behaviors.ae_social_login,
		dsae = Drupal.settings.ae_social_login,
		dsbul = Drupal.settings.bolero_user_login || {},
		ae_form_field_mapping = Drupal.settings.ae_social_login ? Drupal.settings.ae_social_login.form_field_mapping : null,
		ae_forms = Drupal.settings.ae_social_login ? Drupal.settings.ae_social_login.forms || [] : [];
	dsbul.isMobile = dsae && dsae.settings ? !dsae.settings.auth_window : false;

    var bul = {
	    flow: "login",
	    $forms: $forms,
	    isBlock: $forms.length > 0,
	    isModal: $forms.is("[data-reveal]"),
	    isMobile: dsbul.isMobile,
	    opened: false, // TODO isOpened, isInitialized
	    initialized: false,
	    data: {},
	    //## Initialize Bolero Modal
	    init: function(){
		    if(!bul.initialized){
			    $forms.form = $forms.find(".user-login-forms .login form");
			    // ### Attach login / register form handler
			    if($ae_reg_forms.length > 0){
				    $forms = $ae_reg_forms;
			        bul.isModal = false;
				    bul.isBlock = false;
				    this.attach();
				    $ae_reg_forms.each(bul.handlers.ae_register_form);
		        }else if(bul.isBlock){
				    //### Update the Drupal login to show the modal
				    IGA.drupal.login = function(){
					    //Override to use Foundation reveal modal login block if present.
					    bul.open();
				    };
				    this.attach();
				    if($forms.attr("data-default-form") === "register"){
					    bul.handlers.register();
				    }else{
					    bul.handlers.login();
				    }
			    }

			    //### Attach social handler
			    if($forms.social){
				    $forms.social.on("click", bul.actions.social);
			    }

			    //### Listen for AE Connect social login
			    events.on("ae_ready", bul.attachAE).replay("ae_ready", bul.attachAE);

			    this.initialized = true;
			    //### Basic ui events
			    $forms.on("close.fndtn.reveal", function(){
				    bul.opened = false;
			    });
				if(iga_user.ae_user){
					// Add connected service classes
					var $html = $("html"),
						ae_user = iga_user.ae_user;
					for(var s in ae_user.services){
						$html.addClass("ae-connected--"+ ae_user.services[s].Service);
					}
				}
		    }
		    return this;
	    },
	    open: function(reset){
		    //TODO update bul.opened once onLogin provides sso flag
		    if(reset !== false){ bul.data = {}; }
		    this.updateSocials();
		    if(!bul.isModal){
			    if(bul.isBlock){
				    // inline block, treat the same but no need for reveal.
				    bul.$forms.removeClass("hidden").show();
				    // scroll to $forms
				    $("html,body").animate({
					    scrollTop: bul.$forms.offset().top
				    }, 800);
			    }else{
				    //window.location = "/user/" + bul.flow; return;
			    }
		    }else{
			    require(["foundation.reveal"], function(){
				    events.trigger("bolero.user_login.open");
				    $forms.foundation('reveal', 'open');
			    });
		    }
		    var has_been_opened = bul.opened;
		    bul.opened = true;
		    bul.actions.set_display();
		    if(!has_been_opened){
			    ga("send", "event", "Bolero Login", "opened", bul.flow, null, {
				    dimension4: bul.data.display
			    });
		    }
	    },
	    updateSocials: function(){
		    var $socialsContainer = $forms.social.first().parent(), services = [];
		    if(typeof aeJS === "object" && aeJS.user.services){
			    $forms.social.each(function(){
				    var $social = $(this);
				    services.push($social.attr("data-ae-register-form-link"));
			    });

			    _.each(aeJS.user.services.reverse(), function(s){
				    var service = s.Service, $service;
				    if(service === "email"){ return; }
				    if(service === "youtube" && services.indexOf("google") >= 0){
					    $service = $forms.social.filter("."+service);
					    $service.detach();
					    return;
				    }
				    if (services.indexOf(service) === -1 && service !== "applemusic") {
				    	services.push(service);
					    $service = $(bul.ae_login_link(service));
					    $service.on("click", bul.actions.social);
					    $socialsContainer.prepend($service);
				    } else {
					    $service = $forms.social.filter("."+service);
					    if ($service.length) {
						    $service.detach();
						    $socialsContainer.prepend($service);
					    }
				    }
			    });
		    }

		    $forms.social = $socialsContainer.children();
		    if($socialsContainer.length > 0){
			    var socialsCount = $forms.social.length,
				    classes = $socialsContainer[0].className.split(/\s+/);
			    _.each(classes, function(className){
				    if(className.indexOf("social-link-count--") === 0){
					    $socialsContainer.removeClass(className);
				    }
			    });
			    $socialsContainer.addClass("social-link-count--"+socialsCount);
		    }
	    },
	    close: function(){
		    events.trigger("bolero.user_login.close");
		    $forms.foundation('reveal', 'close');
	    },
	    //## (re)Attach DOM Elements
	    attach: function(){
		    var self = this;
		    $.extend(true, $forms, {
			    state: "state--login state--register state--password state--required-fields",
			    header: {
					login: $forms.find("header .login"),
					register: $forms.find("header .register")
			    },
			    forms: $forms.find(".user-login-forms"),
			    login: $forms.find(".user-login-forms .login, header"),
			    register: $forms.find(".user-login-forms .register, header"),
			    password: $forms.find(".user-login-forms .password"),
			    messages: $forms.find(".messages"),
			    social: $forms.find(".ae-social-login-links a")
			});

		    if(!bul.isModal){
			    // use page messages
			    $forms.messages = $(".messages");
		    }

		    //### Show user_register form
		    $forms.find("header .register").once("bolero-emcee-login", function(){
			   $(this).on("click", _.bind(bul.handlers.register, self));
		    });

		    //### Show user_login form
		    $forms.find("header .login, .user-login-forms .password .user-login-link").once("bolero-emcee-login", function(){
			   $(this).on("click", _.bind(bul.handlers.login, self));
		    });

		    if(iga_user.uid){
			    // In the authenticated state update to "connect"
			    $forms.header.login.find("h2").text("Connect");
			    $forms.header.login.find("h2 + span").text(" an additional account");
			    $forms.find("#bolero-user-login-submit").val("Connect");
			    $forms.login.removeAttr("data-ae-type");
			    $forms.addClass("state--connect");
		    }

		    //### Show user_password form
		    $forms.find(".password-reset-link a").once("bolero-emcee-login", function(){
			  $(this).on("click", _.bind(bul.handlers.password, self));
		    });

			bul.attachRegister();
			return this;
	    },
	    //### Update Registration Form UI
	    attachRegister: function(){
		    $("form#bolero-user-register, form#user-register-form").once(function(){
			    var $register = $(this),
				    $email = $register.find("#edit-mail"),
				    $username = $email.parent().siblings(".form-item").find(".username").first(),
				    $password = $register.find(".form-item-pass-pass1"),
				    $password_confirm = $register.find(".form-item-pass-pass2"),
				    $password_strength = $password.find(".password-strength"),
				    $password_confirm_msg = $password_confirm.find("div.password-confirm");
			    //Autocomplete username based off of the email
			    var updateUsername = _.debounce(function(){
				    var username = $email.val().split("@")[0];
				    $username.val(username);
			    }, 200);
			    $email.on("input", updateUsername);
			    // but remove the autocomplete if the user updates their username
			    $username.on("focus", function(){ $email.off("input", updateUsername); });

			    //move the password strength & confirm check
			    $password_strength.detach().appendTo($password);
			    $password_confirm_msg.detach().appendTo($password_confirm);

		    });
		    return this;
	    },
	    //## Once AE is ready
	    attachAE: function(aeJS){
		    // Listen for AE user events;
		    if(bul.isBlock){
				aeJS.events.onLogin.addHandler(bul.handlers.required_fields);
		        aeJS.events.onUser.addHandler(bul.handlers.required_fields);
		    }

		    function onFlow(e){
			    if(e.step === "error"){
				    bul.handlers.error(null, {
					    type: "AE Connect : " + bul.flow,
					    message: e.error,
					    errors : { ae_user: true }
				    }, true);
			    }else if(e.step === "remove"){
				    bul.flow = "login";
				    bul.actions.login(aeJS.user, e.step);
			    }
		    }

		    events.on("ae_flow", onFlow).replay("ae_flow", onFlow);
		    //TODO tracktiming b/w social open & onUser / onLogin
		},
	    //## Attach Forms
	    attachForm: function(bolero_form){
		    var $form = bolero_form.$form,
			    form_id = bolero_form.$form.attr('id');// element Id
		    if(!$forms.form){ $forms.form = $form; }
		    function ae_attach(aeJS){
			    // If AE is available, submit w/ AE.
			    if(!$form.is("[data-ae-register-form]") && ae_forms.indexOf(form_id) >= 0 || bolero_form.settings.ae_attached === false ){
				    $form.attr("data-ae-register-form", "email");
				    aeJS.trigger.attach($form[0]);
				    bolero_form.settings.ae_attached = true;
			    }
			    if($form.is("form[data-ae-type=login]")){
				    $form.one("user", function(){
					    $form.removeAttr("data-ae-type");
				    });
			    }
		    }

		    // Attach custom submit + validate handler
		    bolero_form.onSubmit = _.partial(bul.actions.submit, bolero_form);
		    $form.on("submit", bolero_form.onSubmit);

		    events.on("ae_ready", ae_attach).replay("ae_ready", ae_attach);
		    if(!bolero_form.settings.attached){
			    // One-time form initialization
			    bolero_form.$form.on("login", bul.events.login).on("register", bul.events.register);
			    bul.setOptOut(bolero_form);
			    bolero_form.settings.attached = true;
		    }
	    },
	    detachForm: function(bolero_form){
		    bolero_form.$form.find("input[name=ae_user]").empty();
		    // Remove the AE form submit and error handler
		    bolero_form.$form.off("submit error");
		    bolero_form.settings.ae_attached = false;
	    },
	    setOptOut:function(bolero_form) {
		    var $inline_lists = $(".bolero-login-buttons--subscription-lists input"),
		        $lists = bolero_form.$form.find(".subscription-lists input").add($inline_lists),
		        subscribedCount = 0;
		    if(!require.specified("EmailSubscription")){ return; }
		    if($inline_lists.length > 0){
			    bul.inline_optins = true;
			    ga("set", { "dimension4": "inline" });
		    }

				require(["EmailSubscription", "IGA.webshim.storage"], function(ES) {
					//var optins = ES.clearOptins();
					var optins = ES.getOptins();
					$lists.once("bul", function() {
						var $list = $(this), self = this,
						    listId = $list.val(),
						    isOptedOut = ES.isOptedOut(listId),
						    isSubscribed = ES.isSubscribed(listId);

						ES.addList($list, "bolero_user_login", bolero_form.$form);
						// The login subscription lists don't set a #default_value so we
						// must check them client-side.
				    if (isOptedOut || isSubscribed || dsbul.optout_default) {
					    // If the user has opted out of the list, respect opt-out;
					    // also uncheck if the user is already subscribed so we don't attempt to re-subscribe (b/c expensive)
					    // or if we require an opt-in to subscribe for reasons.
					    $list.prop("checked", false);
				    } else {
					    // otherwise, pre-check the checkbox
					    $list.prop("checked", true);
					    ES.setSubscribeDefault(listId, true);
					    optins[listId] = 1;
				    }

				    // Removing the logic that hides lists that the user has already subscribed to.
					  // This is unexpected, undesirable, and unnecessarialy complex;
						// now that we have subscribe via a queue it isn't all that neccessary either.
				    //if (isSubscribed) {
					  //  $list.closest(".form-item").hide();
					  //  subscribedCount++;
				    //}

						events.on("user.clear", function() {
							// There's a new user, remove past subscription.
							ES.clearSubscribed(listId);
							ES.clearOptins();
						});

				    // and listen for any future opt-out / opt-in.
				    $list.on("click", function(){
					    bul.et_optout = true;
					    // After the user has checked an ES optin
					    var checked = $list.prop("checked");
					    // update their opt-out status.
					    if (checked === false) {
						    ES.setOptOut(listId, true);
					    } else if(checked === true) {
						    ES.setOptOut(listId, false);
					    }
					    events.trigger("optin."+listId,[checked, this]);
				    });

						events.on("optin."+listId, function(checked, target){
							if (target !== self){
								$list.prop("checked", checked);
							}
						});
			    });
			    //if (subscribedCount === $lists.length) {
				  //  $forms.form.find(".subscription-lists.form-checkboxes").closest(".form-item-lists").hide();
				  //  $forms.form.find(".umg-disclaimer").hide();
				  //  $(".bolero-login-buttons--subscription-lists").hide();
			    //}
			    ES.setOptins(optins);
					events.trigger("bolero.emailsubscription.ready");
		    });
	    },
	    ae_login_link_template: _.template('<a href="#" data-ae-register-form-link="{{service}}" class="ae-link login {{service}}" ><i class="icon icon-{{service}}"></i><span class="label"><span class="auth-action">Login</span><span class="with"> with </span><span class="social">{{Service}}</span></span></a>'),
	    ae_login_link: function(service){
		    return bul.ae_login_link_template({ service: service, Service: service.charAt(0).toUpperCase() + service.slice(1) });
	    },
	    actions: {
		    //### Social Login / Registration
		    social: function(e){
			    var $social = $(this),
				    network = $social.attr("data-ae-register-form-link");
			    e.preventDefault();
			    $forms.form.attr("data-ae-register-form", network);
			    function submit(){
				    if(bul.isMobile){
					    ga("send", "event", "AE Connect", "opened", network, null);
					    IGA.setConversion(IGA.conversionPt, true);
				    }
				    bul.actions.check_optout();
				    aeJS.trigger.authenticate(network, dbae.auth);
				    bul.data.provider = network;
			    }
			    events.on("ae_ready", submit).replay("ae_ready", submit);
		    },
		    //### Email Login / Registration
		    submit: function(bolero_form, e){
			    e.preventDefault();
			    e.stopImmediatePropagation();
			    var $form = bolero_form.$form, form = $form[0];
			    bul.data.provider = "email";
			    function removeSubmit(){
				    // If no errors submitting to AE remove AE submit
				    bolero_form.$form.off("submit", bolero_form.onSubmit);
				    // defer removing this listener otherwise it breaks loop
				    _.defer(function(){ aeJS.events.onUser.removeHandler(removeSubmit); });
			    }
			    if($form.is("form[data-ae-register-form]")){
				    aeJS.events.onUser.addHandler(removeSubmit);
				    $form.once("bul-form-submit", function(){
					    bolero_form.$form.on("validated", function(){
						    //#### Once Validated
						    removeSubmit();
						    if(bul.flow === "login"){
							    // Map user login name / email field to username / email
							    var $name = $form.find('input[name="name"]'),
								    name = $name.val();
							    if(name.indexOf("@") > 0){
								    // name is an email
								    var username = name.split('@')[0];
								    ae_form_field_mapping[bolero_form.form_id + ".name"] = "email";
								    // set a default username
							    }else{
								    //form name is an username
								    ae_form_field_mapping[bolero_form.form_id + ".name"] = "username";
							    }
						    }
						    dbae.map_ae_fields($form);
						    bul.actions.check_optout();
						    // submit the form to AE login / register.
						    aeJS.trigger.submit(form);
						    bul.ae_login_start = Date.now();
					    });
				    });
				    bolero_form.validate();
			    }else{
				    // Otherwise, just submit.
				    bolero_form.submit();
			    }
		    },
		    //## AE Login / Register Form Submit
		    login: function(ae_user, type, options){
			    options = options || {};
			    if(options.remoteOnly){
				    events.trigger("bolero.remote_login", [ae_user, type, options]);
				    if(bul.opened){ bul.close(); }
				    return;
			    }
			    //This should be the local flow rather than if this is a login / register in ae
			    bul.handlers[bul.flow](null, false);
			    // add the ae_user data to the form hidden input
			    var $ae_user = $forms.form.find("input[name=ae_user]");
			    $ae_user.val(JSON.stringify(ae_user));
			    dbae.remove_ae_field_mappings($forms.form);
			    // and submit via AJAX.
			    require(["bolero.form"], function(BoleroForm){
				    var bolero_form = new BoleroForm($forms.form);
				    $forms.form[0].action = (bolero_form.formSubmitId) ? Drupal.settings.ajax[bolero_form.formSubmitId].url  : "/system/ajax";
				    bolero_form.data.campaign = IGA.conversionPt;
				    bul.actions.set_display();
				    bolero_form.data.display = bul.data.display;
				    bolero_form.data.nid = bul.data.nid;
				    bolero_form.submit();
			    });

			    bul.handlers.prevent = false;
		    },
		    set_display: function(){
			    if(bul.opened){
				    if(bul.opened_required_fields){
					    bul.data.display = "modal required_fields";
				    }else if(bul.opened_et){
					    bul.data.display = "modal opt-in";
				    }else{
					    bul.data.display = "modal";
				    }
			    }else{
				    bul.data.display = "inline";
			    }
		    },
		    clear_subscriptions: function(){
			    require(["EmailSubscription"], function(ES) {
			    	ES.clearOptins();
			    });
			    $forms.find(".subscription-lists input").add(".bolero-login-buttons--subscription-lists input").each(function(){
				    $(this).prop( "checked", false );
			    });
		    },
		    check_optout: function() {
			    if (bul.isMobile && UMG.country != 'US') {
				    // If country is not US then we cannot subscribe by default.
				    events.trigger("optout.default", ["nonUS"]);
			    }
		    },
		    casl: function(reason, broadcast) {
		      require(["EmailSubscription"], function(EmailSubscription) {
		        //if(dsbul.optout_default){ return; }
		        dsbul.optout_default = true;
		        if (reason === "casl") {
		          dsbul.casl = true;
		          bul.$forms.find("div.umg-disclaimer .casl-message").remove();
		          bul.$forms.find("div.umg-disclaimer")
		            .add(".bolero-login-buttons--subscription-lists .umg-disclaimer")
		            .filter(EmailSubscription.caslElementFilter)
		            .append(EmailSubscription.casl_message);
		        }
		        bul.actions.clear_subscriptions();
		        events.off("optout.default", bul.actions.optout_default);
		        if (reason && broadcast) { events.trigger("optout.default", [reason]); }
		      });
		    }
	    },
	    events: {
		    //## Login event callback
		    login: function(e, result){
			    var options = {},
				    user = result.user,
				    alreadyLoggedIn = iga_user.uid ? true : false;
			    if(typeof aeJS !== "undefined"){ options.ae_user = aeJS.user; }
			    if(alreadyLoggedIn){
				    bul.events.updated(user);
			    }
			    if(bul.data.nid){ options.nid = bul.data.nid; }
			    if(bul.data.title){ options.title = bul.data.title; }
			    if(bul.data.provider){ options.provider = bul.data.provider; }
			    if(bul.data.display){ options.display = bul.data.display; }
			    options.flow = bul.flow;
			    ga("send", "event", "Bolero Login", bul.flow, bul.data.provider, null);
			    events.trigger("login", [user, options]);
			    if(!alreadyLoggedIn){
				    $forms.form.addClass("state--loading");
				    var redirect_url = bul.data ? bul.data.redirect_url : null;
				    if(!redirect_url){
					    var url = IGA.utils.parseUrl(location.href);
					    if(url.params['?'].destination){
						   redirect_url = url.params['?'].destination;
						    if(redirect_url.charAt(0) !== "/"){ redirect_url = "/"+redirect_url; }
					    }
				    }
				    if(IGA.location.preventReload.reload === true){
					    bul.close();
					    $(document).trigger("messages");
				    }else{
					    IGA.location.reload(redirect_url);
				    }
				    bul.data = {};
			    }else{
				    bul.handlers.prevent = false;
				    bul.handlers.login();
			    }
		    },
		    updated: function(user){
			    bul.close();
			    var action = "connected", connected_service;
			    if(iga_user.ae_user && user.ae_user){
				    if(user.ae_user.services.length === iga_user.ae_user.services.length){
					    // No new services have been added.
					    action = "updated";
				    }else{
					    // Otherwise, find the new service.
					    var service, orig_service;
					    for(var s in user.ae_user.services){
						    service = user.ae_user.services[s];
						    connected_service = false;
						    for(var o in iga_user.ae_user.services){
							    if(service.ID === iga_user.ae_user.services[o].ID){
								    connected_service = true;
								    break;
							    }
						    }
						    if(connected_service === false){
							    connected_service = service;
						    }
					    }
				    }
			    }
			    if(typeof connected_service === "object"){
				    events.trigger(action, [connected_service.Service, connected_service, user]);
				    require(["bolero.snackbar"], function(Snackbar){
					    if(action === "connected"){
						    $("html").addClass("ae-connected--"+connected_service.Service);
						    Snackbar.add('<i class="icon icon-'+connected_service.Service+'"</i>Now connected as '+ connected_service.Username + '.', true, null, { type: "success"});
					    }else{
						    Snackbar.add("Success! Your account has been "+action+".", true, null, { type: "success"});
					    }
				    });
			    }
		    },
		    remote_login: function(user){
			    // TODO it'd be nice if we could figure out new vs. connected vs. already connected.
		    },
		    //## Register event callback
		    register: function(e, user){
			    var options = {};
			    if(typeof aeJS !== "undefined"){ options.ae_user = aeJS.user; }
			    events.trigger("register", [user, options]);
			    bul.events.login(e, user);
		    }
	    },
	    handlers: {
		    prevent: false,
		    login: function(e, attach, error){
			    if(bul.handlers.prevent){ return false; }
			    if(e){ e.preventDefault(); }
			    bul.flow = "login";
			    $forms.removeClass($forms.state).addClass("state--login");
			    $forms.header.login.addClass("active");
			    $forms.header.register.removeClass("active");
			    var formSelector = "form#bolero-user-login, form.bolero-user-login, form.user-login, form#user-login",
				    authAction = iga_user.uid ? "Connect" : "Login";
			    $forms.form = $forms.find(formSelector).andSelf().filter(formSelector);
			    $forms.social.find(".auth-action").text(authAction);
			    //On state change, hide the previous messages
			    if(!error){ $forms.messages.hide(); }
			    require(["bolero.form"], function(BoleroForm){
				    var submitText = (iga_user.uid) ? "Connecting..." : "Logging In...",
					    bolero_form = new BoleroForm($forms.form, null, null, { submitText: submitText });
				    attach = attach || !bolero_form.settings.attached;
				    if(attach !== false){
					    bul.handlers.form($forms.form);
					    // If using AE connect validate using bolero_form and submit to AE before submitting locally.
					    bul.attachForm(bolero_form);
					    events.trigger("bolero.login.ready");
				    }
			    });
		    },
		    register: function(e, attach, error) {
			    if(bul.handlers.prevent){ return false; }
			    if(e){ e.preventDefault(); }
			    bul.flow = "register";
			    require(["bolero.form"], function(BoleroForm) {
				    var $container = $forms.register.filter(".register.bolero-ajax-form-wrapper"),
					    data = {
				    	  et_lists: dsbul.et_lists ? dsbul.et_lists.join(",") : '',
						    dm_lists: dsbul.dm_lists ? dsbul.dm_lists.join(",") : ''
				      },
					    bolero_form = new BoleroForm($container, null, data, { submitText: "Creating Account..." });
						bolero_form.load().done(function(response){
					    if(response !== false){
					        // Because the form was loaded via ajax we should re-attach it
					        bul.attach();
					    }else{
						    attach = attach || !bolero_form.settings.attached;
					    }
					    $forms.removeClass($forms.state).addClass("state--register");
					    $forms.header.register.addClass("active");
					    $forms.header.login.removeClass("active");
							var formSelector = "form#bolero-user-register, form.bolero-user-register, form#user-register-form, form.user-register-form";
							$forms.form = $forms.find(formSelector).andSelf().filter(formSelector);
							$forms.social.find(".auth-action").text("Register");

							if(!error){ $forms.messages.hide(); }
							if (attach !== false) {
								bul.handlers.form(bolero_form.$form);
								// If using AE connect validate using bolero_form and submit to AE before submitting locally.
								bul.attachForm(bolero_form);
								ga("send", "event", "Bolero Login", "opened", "register", null);
								$forms.form.on("grecaptcha.reset", function(){ if(window.grecaptcha){ grecaptcha.reset(); } });

								var $recaptcha = bolero_form.$form.find(".captcha .g-recaptcha");
								if($recaptcha.is(":empty")){
									var recaptcha_params = {
										sitekey: $recaptcha.attr("data-sitekey"),
										theme: $recaptcha.attr("data-theme"),
										type: $recaptcha.attr("data-type")
									};
									if(window.grecaptcha){ grecaptcha.render($recaptcha[0], recaptcha_params); }
								}
							}
				    });
			    });
		    },
		    ae_register_form: function(){
			    var $ae_reg_form = $(this),
				    formId = this.id;
			    require(["bolero.form"], function(BoleroForm){
				    var bolero_form = new BoleroForm($ae_reg_form, null, null, { useAjax:false, ajaxSubmit:false });
				    function attach_register_form(){
					    function ae_submit(ae_user, type, sso) {
						    if(type === "init" || sso === true){ return; }//|| sso === true
						    var $ae_user = bolero_form.$form.find("input[name=ae_user]");
						    $ae_user.val(JSON.stringify(ae_user));
						    dbae.remove_ae_field_mappings(bolero_form.$form);
						    bolero_form.submit();
					    }
					    events.on("ae_login", ae_submit).replay("ae_login", ae_submit);
					    events.on("ae_user", ae_submit).replay("ae_user", ae_submit);
					    bolero_form.$formSubmit.on("click", function(){
						    $forms.form = bolero_form.$form;
						    bul.flow = (formId.indexOf("register") >= 0) ? "register" : "login";
					    });
				    }
				    bul.handlers.form(bolero_form.$form);
				    if(formId !== "ae-required-fields"){
					    bul.attachForm(bolero_form);
					    events.on("ae_ready", attach_register_form).replay("ae_ready", attach_register_form);
				    }else{
					    $forms.form = bolero_form.$form;
				    }
			    });
		    },
		    password: function(e, error){
			    if(bul.handlers.prevent){ return false; }
			    if(e){ e.preventDefault(); }
			    require(["bolero.form"], function(BoleroForm){
				    var $container = $forms.password.filter(".password").find(".bolero-ajax-form-wrapper"),
					    bolero_form = new BoleroForm($container, null, null, { submitText: "Sending Email..." });
				    bolero_form.load().done(function(response){
					    if(response !== false){
					        // Because the form was loaded via ajax we should re-attach it
					        bul.attach();
						    ga("send", "event", "Bolero Login", "opened", "password", null);
					    }
					    $forms.removeClass($forms.state).addClass("state--password");
					    if(!error){ $forms.messages.hide(); }
					    $forms.form = bolero_form.$form;
					    if(this.xhr){
						    bul.handlers.form($forms.form);
					    }
				    });
			    });
		    },
		    required_fields: function(user, type, sso){
			    if(type === "init" || sso === true || !bul.isBlock){ return; }
			    if(dbae.remoteOnly){
				    if(bul.opened){ bul.close(); }
				    return bul.events.remote_login(user);
			    }
			    var $container = $forms.required_fields || $('<div class="required-fields ae-form" style="display:none"></div>'),
				    options = { remoteOnly: dbae.remoteOnly };
			    if(!$forms.required_fields){
				    $forms.forms.append($container);
				    $forms.required_fields = $container;
			    }
			    require(["bolero.form", "EmailSubscription"], function(BoleroForm, ES){
				    var bolero_form = new BoleroForm($container, 'ae_required_fields', {ae_user: JSON.stringify(user) });
				    bolero_form.load().done(function(response) {
					    if(response === false){
						    // The form has already been loaded, no ajax request needed.
						    if(!bul.required_fields_complete && !bul.opened){
							    // If the user hasn't satisfied all required fields ask them again;
							    bul.handlers.show($container, 'required-fields');
							    bul.open(false);
						    }else{
							    // otherwise, continue with login / update.
							    if(!bul.opened && !bul.inline_optins){
								    bul.actions.clear_subscriptions();
							    }
							    bul.actions.login(user, type, options);
						    }
						    return;
					    }

					    var $form = bolero_form.$form,
						    $required_fields = $form.find('input[name=required_fields]'),
						    has_required_fields = $required_fields.val() !== "",
						    required_fields_subscriptions = dsbul.required_fields_subscriptions,
						    country = user.data.CountryCode;

							bul.required_fields_complete = false;
					    if(!country && user.data.GeoCountry){ country = user.data.GeoCountry; }
					    if(dsbul.casl || country === "CA" || user.data.Country === "Canada"){
						    bul.actions.casl("casl", true);
					    }else if(dsbul.optout_default || country !== "US" || user.data.Country !== "United States"){
						    bul.actions.casl("nonUS", true);
					    }
					    if (country) {
						    events.trigger("country.detect", [country]);
					    } else {
					    	country = UMG.country;
					    }
					    required_fields_subscriptions = bul.handlers.required_fields_subscription_lists($form, country, ES);

					    //If the required fields screen is triggered, open the modal.
					    if(!has_required_fields){
						    // If already logged in then we're all set.
						    dbae.updateForm($forms.form);
						    if (required_fields_subscriptions > 0) {
							    $form.find("#ae-required-fields-submit").val("Continue");
							    if(dsbul.required_fields_subscribe_cta){
								    $form.find("header > h3").text(dsbul.required_fields_email_cta);
								    $form.find("header > .description").hide();
							    }
							    $form.on("submit", function(e){
								    e.preventDefault();
								    e.stopImmediatePropagation();
								    $form.addClass("state--loading");
								    bul.required_fields_complete = true;
								    bul.actions.login(user, type, options);
							    });
							    if(!bul.opened){ bul.opened_et = true; }
							    bul.handlers.show($container, 'required-fields');
							    ga("send", "event", "Bolero Login", "opened", "required_fields", null);
						    } else {
							    if(!bul.opened && !bul.inline_optins){
								    // Uncheck ES mailing lists if the user hasn't seen the login form yet
								    // so that we don't blindly subscribe them.
								    bul.actions.clear_subscriptions();
							    }
							    bul.required_fields_complete = true;
							    bul.actions.login(user, type, options);
							    ga("send", "event", "Bolero Login", "skip", "required_fields", null);
						    }
						    return;
					    }
					    // ### If there are some required fields left
					    events.trigger("bolero.required_fields", [user, type, sso]);

					    // Show the form
					    if(!bul.opened){
						    bul.opened_required_fields = true;
						    bul.open(false);
					    }
					    bolero_form.$container.show();
					    bul.handlers.form($form);
					    bul.handlers.show($container, 'required-fields');
					    //##### Validate the form
					    function validate(e){
						    bolero_form.validate();
						    return false;
					    }
					    function ae_continue(user, state){
						    // use the updated user from AE
						    aeJS.events.onUser.removeHandler(ae_continue);
						    aeJS.events.onLogin.addHandler(bul.handlers.required_fields);
						    aeJS.events.onUser.addHandler(bul.handlers.required_fields);
						    bul.handlers.prevent = false;
						    bolero_form.$container.hide();
						    //update the form fields with AE user data
						    dbae.updateForm($forms.form);
						    bul.handlers[bul.flow](null, false);
						    bolero_form.delete();
						    bul.handlers.prevent = true;
						    bul.actions.login(user, type, options);
					    }
					    $form.on("submit", validate);
					    // Once the form has been validated server-side, submit to AE
					    bolero_form.$form.on("validated", function(){
						    $form.off("submit", validate);
						    $form.attr("data-ae-register-form", $forms.form.attr("data-ae-register-form"));
						    dbae.map_ae_fields($form);
						    aeJS.trigger.attach($form[0]);
						    // and continue with login/registration.
						    aeJS.events.onLogin.removeHandler(bul.handlers.required_fields);
						    aeJS.events.onUser.removeHandler(bul.handlers.required_fields);
						    aeJS.events.onUser.addHandler(ae_continue);
						    aeJS.trigger.submit($form[0]);
					    });
					    ga("send", "event", "Bolero Login", "opened", "required_fields", null);
				    });
			    });
		    },
		    required_fields_subscription_lists: function($form, country, ES){
		    	// TODO update selectors
			    // TODO update localStorage & cookies
			    var subscriptionCount = 0,
				    level = dsbul.required_fields_subscriptions; // TODO rename to required_fields_subscriptions
			    // ### Copy the ES required fields as part of the required_fields form
			    var $lists = $forms.form.find(".subscription-lists.form-checkboxes").closest(".form-item-lists").clone(),
				    $list_items = $lists.find("input"),
				    $disclaimer = $forms.form.find(".umg-disclaimer").clone();

			    $list_items.each(function(){
				    var $list = $(this),
					    $form_list = $forms.form.find('input.subscription-lists[name="'+$list.attr("name")+'"]'),
					    listId = $list.val(),
					    isChecked = $list.is(":checked"),
					    isOptedOut = ES.isOptedOut(listId),
					    isSubscribed = ES.isSubscribed(listId);
				    $list.removeAttr("id");
				    if(isChecked && (bul.opened || bul.inline_optins) || isSubscribed || isOptedOut && level !== 3){
					    // We can skip the required fields screen if the user has subscribed or opted out of lists.
					    subscriptionCount++;
				    }
				    if(level === 3 && !isSubscribed && !bul.et_optout && !dsbul.optout_default){
					    $list.prop("checked", true);
					    $form_list.prop("checked", true);
				    }
				    $list.on("click", function(){ $form_list.click();});
				    $list.siblings("label").on("click", function(){
					    // Cloned labels retain original for="id", just need to update checked status.
					    setTimeout(function(){ $list.prop("checked", $form_list.prop("checked")); }, 0);
				    });
			    });
			    if(dsbul.optout_default && country != "US" && dsbul.required_fields_casl && level < 1){
				    // For detected non-US countries we require opt-in and should prompt for mailinglists again.
				    level = 1;
			    }
			    if( bul.et_optout || level === 1  && subscriptionCount > 0 ||
				    level >= 2 && subscriptionCount === $list_items.length ){
				    dsbul.required_fields_subscriptions = level = 0;
			    }
			    $form.find(".form-actions").before($lists).before($disclaimer);
			    return level;
		    },
		    error: function(e, error, fatal){
			    if(error){
				    // force error.message to be interpreted as html
				    var $error = $($.parseHTML(error.message)),
					    error_message = error.message;

				    if($error.is("#messages")){ error_message = $error.children(".messages").html(); }
				    if($error.is(".messages")){ error_message = $error.html(); }
				    error_message = bul.handlers.custom_errors(error_message);

				    $forms.messages = $forms.find("#messages, .messages");
				    $forms.messages.empty().addClass("messages error messages--error").first().siblings("#messages, .messages").remove();
				    $forms.messages.html(error_message).show();

				    if(bul.isBlock){
					    // update links to trigger screen handlers
					    $forms.messages.find("a").each(function(){
						    var $link = $(this),
							    href = $link[0].href;
						    if(href.indexOf("/user/login", href.length - 11) !== -1){
							    $link.on("click", bul.handlers.login);
						    }else if(href.indexOf("/user/register", href.length - 14) !== -1){
							    $link.on("click", bul.handlers.register);
						    }else if(href.indexOf("/user/password", href.length - 14) !== -1){
							    $link.on("click", bul.handlers.password);
						    }
					    });
				    }

				    if(error.errors && (error.errors.ae_user) && $forms.form && $forms.form.get(0).id !== "ae-required-fields"){
				    // or form is validated
					    // If ae_user error then logout of AE so another attempt can be made.
					    aeJS.trigger.logout();
					    if(bul.isBlock){
						    aeJS.events.onLogin.addHandler(bul.handlers.required_fields);
						    aeJS.events.onUser.addHandler(bul.handlers.required_fields);
					    }
					    // re-attach Bolero form
					    require(["bolero.form"], function(BoleroForm){
						    var bolero_form = new BoleroForm($forms.form);
						    // Detach & re-attach form.
						    bul.detachForm(bolero_form);
						    bul.handlers[bul.flow](null, true, true);
						    $forms.messages.show();
					    });
				    }
					// Make sure the modal is displayed if needed.
				    if(!bul.opened){ bul.open(false); }

				    $error.children(".element-invisible").remove();
				    var error_text = $error.text();
				    if(typeof fatal !== "undefined"){
					    ga("send", "exception", {
						    appName: error.type || "Bolero Login",
						    exDescription:  error_text,
						    exFatal: fatal
					    });
				    }else{
					    ga("send", "event", error.errors.ae_user ? "AE Connect" : "Bolero Login", "error", error_text, null, {nonInteraction: 1});
				    }
			    }else{
				    $forms.messages.text("Unable to login, an error has occurred.").show();
			    }
		    },
		    custom_errors: function(message){
			    message = message.toLowerCase().replace(/\+/g, " ");
				switch(message){
					case "email account already exists with a different password":
						return 'An account with this e-mail address already exists with a different password. <a href="/user/password">Reset&nbsp;Your&nbsp;Password</a>';
					case "no account exists with those credentials.":
						return 'No account exists with that e-mail / password. <a href="/user/register">Create&nbsp;an&nbsp;Account</a> or <a href="/user/password">Reset&nbsp;Your&nbsp;Password</a>';
			  }
			  return message;
		    },
		    form: function($form){
			    $form.on("error", bul.handlers.error);
			    if( require.specified("IGA.common.webform") && Modernizr && Modernizr.inputtypes.date){
				    require(["IGA.common.webform"], function(Webform){
					    $form.find(".form-item-birthdate.form-type-date-text input").attr({
						    type: "date",
						    autocomplete: "bday",
						    placeholder: "mm/dd/yyyy",
						    required: null
					    });
					    $form.find(".form-type-date, .form-type-date-select, .form-type-date-text").each(Webform.dateInput);
				    });
			    }
				  // CASL zipcode detection
			    require(["EmailSubscription"], function(EmailSubscription) {
            var casl_match = _.debounce(function(){
              var $zip = $(this), zip = $zip.val().toUpperCase();
              if(zip.match(EmailSubscription.casl_regex)){
                bul.actions.casl("casl", true);
                $zip.off("change", casl_match);
              }
            });
            $form.find("input[name=zipcode]").on("change", casl_match);
			    });
		    },
		    show: function($form, state){
			    $forms.removeClass($forms.state).addClass("state--"+state);
			    $form.show();
			    bul.handlers.prevent = true;
			    $forms.messages.hide();
			    if(!bul.opened){ bul.open(); }
		    }
	    }
    };

	function mobile_detect(){ dsbul.isMobile = bul.isMobile = true; }
	events.on("ae_mobile_detect", mobile_detect).replay("ae_mobile_detect", mobile_detect);

    return bul;
});

	if($block.length){
		// If the user clicks login before initialization re-trigger when ready.
		IGA.drupal.login = function(){
			require(["bolero.user_login"], function(BoleroLogin){
				BoleroLogin.init().open();
			});
		};
	}
})(jQuery);
;
/**
 * @file Code to initialize a slick carousel on the banner region
 * @see https://github.com/kenwheeler/slick/
 */
/*globals require, requirejs, define, jQuery, Drupal, IGA */
// # Bolero Banner
// ## Slick
define("bolero.banner.slick", ["jquery","underscore", "bolero.slickAnalytics", "IGA.events", "css!jquery/slick/slick.css", "jquery/slick/slick.min"],
	function($, _, SlickAnalytics, events){
	"use strict";
	function BoleroBanner($banner){
		var tracking = new SlickAnalytics($banner);
		var slick_defaults = {
			infinite:true, centerMode:false, centerPadding: '0px', arrows:true,
			autoplay:false, autoplaySpeed:5000, pauseOnHover:true,
			responsive: [{
				breakpoint: 600,
				settings:{ fade:false }
			},
				{
					breakpoint: 599,
					settings: { fade:false, arrows: false /*centerMode: true,*//*centerPadding: '10%'*/ }
				}],
			onInit: function(slider){
				tracking.init(slider);
				events.trigger("bolero.banner.init", [slider]);
				if(slider.$slides.length){
					// autoplay any video in the first slide.
					$(slider.$slides[0]).find("video.bolero-gifv[autoplay]").each(function(){
						var video = this;
						$(this).on("bolero.gifv.reattach", function(){ try{video.play();}catch(e){} });
						try{ video.play(); }catch(e){}
					});
				}
			},
			onReInit: function(slider){
				tracking.init(slider);
				events.trigger("bolero.banner.reinit", [slider]);
			},
			onBeforeChange: function(slider, currentIndex, targetIndex){
				$(slider.$slides[currentIndex]).find("video").each(function(){
					this.pause();
				});
				events.trigger("bolero.banner.beforechange", [slider, currentIndex, targetIndex] );
			},
			onAfterChange: function(slider, index){
				$(slider.$slides[index]).find("video[autoplay]").each(function(){
					this.play();
				});
				events.trigger("bolero.banner.afterchange", [slider, index]);
			}
		};

		var _settings = _.extend(slick_defaults, Drupal.settings.bolero.banner.slick);
		$banner.slick(_settings);

		function personalize(event, $personalize_block, chosen_option, osid){
			if($banner.find($personalize_block).length > 0){
				// If this personalize block is within the banner.
				var $block = $personalize_block.children(".block").first(),
					$block_content = $block.children("div.block__content"),
					block_content = $block_content.html();
				if(block_content && block_content.trim() === ""){
					// Remove empty personalized blocks
					var $slides = $personalize_block.siblings(":not(.slick-cloned)").andSelf(),
						index = $slides.index($personalize_block);
					$banner.slickRemove(index);
				}else{
					// and personalized slides already in the banner carousel.
					var $block_node = $block_content.children(".node[data-nid]"),
						block_nid = null;
					if($block_node.length > 0){ block_nid = $block_node.attr("data-nid"); }
					$personalize_block.siblings().each(function(){
						// ### For each slide
						var $slide = $(this),
							$entity = $slide;
						if($slide.not(".node, .block")){
							// Find the node or block inside it.
							$entity = $slide.children(".node, .block").first();
						}
						if($entity.length > 0 && $block.length > 0){
							if($block[0].id === $entity[0].id || block_nid && block_nid === $entity.attr("data-nid")){
								// If the same block or node is present elsewhere in the banner remove it as a duplicate.
								var $slides = $slide.siblings(":not(.slick-cloned)").andSelf(),
									index = $slides.index($slide);
								// Note: `.views-row` classes are not updated.
								$banner.slickRemove(index);
							}
						}else if(Drupal.settings.personalize.option_sets[osid].executor === "callback"){
							//TODO support executor = callback to update slick asynchronously.
						}
					});
				}
				$personalize_block.addClass("visible");
			}
		}

		events.on("personalize.personalizeDecision", personalize).replay("personalize.personalizeDecision", personalize);
	}
	return BoleroBanner;
});

(function($){
    "use strict";
    //## Initialize Banner Region
    var $banner = $(".l-banner .l-region--banner").first(),
	    carousel_version = Drupal.settings.bolero.banner.library || "slick";
	Drupal.settings.bolero.banner.$banner = $banner;
	if($banner.length === 0){ return; }
	// and load the carousel
    switch(carousel_version){
        case "owl":
            // ### Owl Carousel
            require(["css!jquery/owl-carousel/owl.carousel.css", "css!jquery/owl-carousel/owl.theme.css","jquery/owl-carousel/owl.carousel.min"], function(){
                $banner.addClass("carousel");
                $banner.owlCarousel({ items:1, loop:true, autoplay:true, autoplayTimeout: 5000, autoplayHoverPause:true, autoHeight:true, navigation:true, dots:true });
            });
            break;
        case "flexslider":
	        require(["jquery/flexslider/jquery.flexslider-min", "css!jquery/flexslider/flexslider.css"], function(){
		        var options = $.extend(Drupal.settings.bolero.banner.flexslider || {}, { animation: "slide", selector: ".l-region--banner > *" });
		        $banner.parent().flexslider(options);
	        });
            break;
        case "slick":
        default:
	        // ### Slick Carousel
            if($banner.children().length > 1){
                require(["bolero.banner.slick"], function(BoleroBanner){
                    new BoleroBanner($banner);
                });
            }
    }
})(jQuery);
;
/**
 * @file bolero-main.layout.js
 */
(function ($) {
    "use strict";

    //# Setup Menu Icon Animation
    function activateHamburger(event) {
        var el = $(this);
        if (el.hasClass('active')){
            el.addClass('active-end');
            el.one('transitionend', function () {
                el.removeClass('active active-end');
            });
        } else {
            el.addClass('active');
        }
    }
    $('.menu-icon').click(activateHamburger);
})(jQuery);
;
/**
 * @file bolero.offcanvas.js
 *
 */
//# Bolero Off Canvas
//TODO re-do data-oc-presentation to allow multiple oc sides.
define("bolero.offcanvas", ["jquery", "underscore", "IGA.events"], function($, _, events){
    "use strict";
    var OffCanvas = {
        init: function($offCanvasWrap){
            OffCanvas.initAjaxDetails($offCanvasWrap);
            if(require.specified("Soundmanager.360.events")){
                //initialize 360 player
                OffCanvas.init360();
            }
            var presentationClass = $offCanvasWrap.attr("data-oc-presentation");
            $offCanvasWrap.find(".off-canvas-close").on("click", function(e){
                var $this = $(this),
                    presentation = $this.attr("data-oc-presentation") || presentationClass;
                e.preventDefault();
                $offCanvasWrap.foundation('offcanvas', 'hide', presentation);
            });

            $offCanvasWrap.find("a.bolero-off-canvas-toggle").once(function(){
                //Foundation open / close events don't play well with standard *-toggle class links so we do this with JS.
                var $this = $(this),
                    presentation = $this.attr("data-oc-presentation") || "move-left",
                    menuSelector = $this.attr("data-oc-menu"),
                    $offCanvasMenu = $offCanvasWrap.find("."+menuSelector);
                $this.on("click", function(e){
                    e.preventDefault();
                    $offCanvasWrap.foundation('offcanvas', 'toggle', presentation);
                    OffCanvas.position($offCanvasWrap, $offCanvasMenu);
                });
            });

            //initialize scrolling listener
            OffCanvas.onscroll();
        },
        refresh: function($container){
            if(typeof threeSixtyPlayer !== "undefined" && $container.is(".view.view-releases")){
                threeSixtyPlayer.init();
            }
            OffCanvas.initAjaxDetails($container);
        },
        initAjaxDetails: function($container){
            // Attach details link click listener
            $container.find(".ajax_details:not(.drupal-attached)").each(function() {
                var $this = $(this),
                    $track = $this.closest(".field-collection-item-field-tracks");
                $this.on("click", function(e) {
                    OffCanvas.details(e, $this);
                });
                $track.on("click", function(e){
                    var $target = $(e.target),
                        smLink = $track.find(".sm2_link").get(0),
                        sound = threeSixtyPlayer.lastSound;
                    if(!$target.is("a") && typeof threeSixtyPlayer !== "undefined" &&
                        (!sound || sound.url !== smLink.href) &&
                        $target.parents(".paragraphs-items-field-providers").length === 0 ){
                        //Fake an event for the soundmanager player
                        threeSixtyPlayer.handleClick({ target: smLink });
                    }
                });
            }).addClass("drupal-attached");
        },
        onscroll: _.once(function (){
            // Hide off canvas main when scrolled past content.
            // Only call this function once.
            require(["underscore","jquery/plugins/jquery.viewport.min"], function(_){
                var $offCanvasMain = $('.l-main.off-canvas-wrap'),
                    presentationClass = $offCanvasMain.attr("data-oc-presentation");
                var onScroll = _.debounce(function() {
                    if ($offCanvasMain.find(".ajax-target .details-more-link:above-the-top").length > 0) {
                        $offCanvasMain.removeClass('offcanvasActive');
                        $offCanvasMain.foundation('offcanvas', 'hide', presentationClass);
                        $(".ajax_details").removeClass('active');
                    }

                    if ($offCanvasMain.find(".ajax-target .field--name-title:below-the-fold").length > 0) {
                        $offCanvasMain.removeClass('offcanvasActive');
                        $offCanvasMain.foundation('offcanvas', 'hide', presentationClass);
                        $(".ajax_details").removeClass('active');
                    }
                }, 200);
                //debounce to fire every 200ms instead of constantly
                $(window).on("scroll", onScroll);
            });
        }),
        init360: _.once(function(){
            //listen for Soundmanager 360 events in tracks
            require(["Soundmanager.360.events"], function(events){
                events.on("Soundmanager.360.play", OffCanvas.on360Play);
                events.on("Soundmanager.360.resume", OffCanvas.on360Play);
                events.on("Soundmanager.360.pause", OffCanvas.on360Pause);
                events.on("Soundmanager.360.stop", OffCanvas.on360Pause);
                events.on("Soundmanager.360.finish", OffCanvas.on360Pause);
            });
        }),
        on360Play: function(three60Player){
            var $link = $(three60Player._360data.oLink),
                $track = $link.closest(".field-collection-item-field-tracks"),
                $detailsLink = $track.find(".ajax_details:first"),
                $offCanvasWrap = $detailsLink.closest(".off-canvas-wrap"),
                $field = $link.closest(".field"),
	            $node = $link.closest("article.node"),
                sound = threeSixtyPlayer.lastSound;
            if($track.closest(".field").is(".field--name-field-tracks")){
                //only trigger off canvas details if this play event is within the releases view.
                $track.addClass("active");
	            $node.addClass("active");
                if( !$offCanvasWrap.is(".offcanvasActive") || !sound || sound.url !== $link.attr("href") ){
                    OffCanvas.details(null, $detailsLink);
                }
            }
        },
        on360Pause: function(three60Player){
            var $link = $(three60Player._360data.oLink),
                $track = $link.closest(".field-collection-item-field-tracks"),
	            $node = $link.closest("article.node");
            $track.removeClass("active");
	        $node.removeClass("active");
        },
        loadContent: function($el, $offCanvasAjax, callback) {
            var target = $el.attr('href'),
                base =  $el.attr('id');
            // ajax callback to replace contents in offCanvas
            require(["jquery","Drupal.ajax"], function($){
                $.ajax({
                    url: target
                }).done(function(response) {
                    var ajax = new Drupal.ajax(base, $el, { url: target}),
                        data = response[1];
                    //todo replace selector in response?
                    data.selector = $offCanvasAjax;
                    ajax.commands.insert(ajax, data);
                    if(callback){ callback($offCanvasAjax, data); }
                });
            });
        },
        details: function(e, $el) {
	        if($el.length === 0){ return; }
            var $offCanvasWrap = $el.closest(".off-canvas-wrap"),
                $offCanvasOuter = $('#page'),
                presentationClass = $offCanvasWrap.attr("data-oc-presentation"),
                side = $offCanvasWrap.attr("data-oc-side"),
                menuSelector = "."+side+"-off-canvas-menu",
                $offCanvasMenu = $offCanvasWrap.children(menuSelector),
                $offCanvasInner = $offCanvasWrap.children(".inner-wrap"),
                $offCanvasAjax = $offCanvasWrap.find("> aside .ajax-target");
            if($offCanvasWrap.is(".view")){
                $offCanvasOuter = $offCanvasWrap.closest(".block--views");
            }
            $offCanvasAjax.empty();
            // prevent default behavior
            if (e !== null) {
                e.preventDefault();
                e.stopImmediatePropagation();
            }

            var $track = $el.closest(".field-collection-item-field-tracks"),
	            $node = $el.closest("article.node");
            if($track.length > 0){
                $(".field-collection-item-field-tracks").removeClass("active");
                $track.addClass("active");
	            $node.addClass("active").siblings(".node").removeClass("active");
            }

            //todo .ajax-details -> .offcanvas-details
            OffCanvas.loadContent($el, $offCanvasAjax, _.partial(OffCanvas.position, $offCanvasWrap, $offCanvasMenu));

            //remove all other off canvas close listeners
            $offCanvasInner.off("click.offcanvas");
            $offCanvasOuter.off("click.offcanvas", offCanvasClose);
            function offCanvasClose(e) {
                var $target = $(e.target);
                if ($offCanvasWrap.is(".offcanvasActive") && $target.closest(".field-collection-item-field-tracks").length === 0 &&
                    $target.closest(menuSelector).get(0) !== $offCanvasMenu.get(0) )
                {
                    $offCanvasWrap.removeClass('offcanvasActive');
                    $offCanvasWrap.foundation('offcanvas', 'hide', presentationClass);
                    $(".ajax_details").removeClass('active');
                    events.trigger("bolero.offcanvas.close", [$offCanvasWrap, $el, $offCanvasAjax, presentationClass]);
                    $offCanvasInner.off("click.offcanvas", offCanvasClose);
                    $offCanvasOuter.off("click.offcanvas", offCanvasClose);
	                $node.removeClass("active");
                }
            }

            // if active details link
            if ($el.hasClass('active')) {
                // hide off canvas
                $offCanvasWrap.foundation('offcanvas', 'hide', presentationClass).removeClass('offcanvasActive');
                $el.removeClass('active');
            } else {
                //TODO empty offcanvas, loading?
                // show offcanvas
                $offCanvasWrap.foundation('offcanvas', 'show', presentationClass);
                $offCanvasWrap.addClass('offcanvasActive');
                events.trigger("bolero.offcanvas.show", [$offCanvasWrap, $el, $offCanvasAjax, presentationClass]);

                // Close offcanvas
                setTimeout(function(){
                    //without the deferred call 360 player triggers a close.
                    $offCanvasInner.on("click.offcanvas", offCanvasClose);
                    $offCanvasOuter.on("click.offCanvas", offCanvasClose);
                },0);

                // remove the active state current details link
                $(".ajax_details").removeClass('active');
                // set active state
                $el.addClass('active');
            }
        },
        position: function($offCanvasWrap, $offCanvasMenu){
            var $window = $(window),
                $offCanvasContainer = $offCanvasMenu.children(".off-canvas-container");
            if($offCanvasMenu.height() > $window.height()){
                //If the off-canvas region is bigger than the window then we need to position it.
                var scrollTop = $window.scrollTop(),
                    offCanvasPadding = parseInt($offCanvasWrap.css('padding').replace("px", ""));
                // calculate position
                var offset = $offCanvasWrap.offset(),
                    position = $offCanvasWrap.position(),
                    headerHeight = $("#page > .inner-wrap > .l-header").height(),
                    ocWrapHeight = $offCanvasWrap.outerHeight(true),
                    margin = 0;
                if (scrollTop > offset.top) {
                    margin = scrollTop - position.top - offCanvasPadding + headerHeight;
                }
                $offCanvasContainer.css('margin-top', margin);
                require(["imagesloaded"], function(imagesLoaded){
                    imagesLoaded($offCanvasContainer.get(0)).on("always", function(){
                        //var ocHeight = $offCanvasAjax.height() + margin;
                        var ocHeight = $offCanvasContainer.outerHeight(true);
                        if(ocHeight > ocWrapHeight){
                            // If the off-canvas menu is taller than the wrapper, add a margin-bottom to the wrapper.
                            //$offCanvasWrap.css("padding-bottom", "+=" + (ocHeight - ocWrapHeight));
                            $offCanvasContainer.css("margin-top", "-=" + (ocHeight - ocWrapHeight));
                        }
                        //TODO follow & .off on close.
                    });
                });
            }
        }
    };
    return OffCanvas;
});

(function($){
    Drupal.behaviors.boleroOffCanvas = {
        attach: function(context, settings){
            var presentationClass,
                $context = $(context);
			if(!settings.bolero){ return; }
            if (settings.bolero.offCanvasContentSide === 'right') {
                presentationClass = settings.bolero.offCanvasContentAnimation + '-left';
            } else {
                presentationClass = settings.bolero.offCanvasContentAnimation + '-right';
            }
            if($context.is(".view")){
                //views load more
                require(["bolero.offcanvas"], function(OffCanvas){
                    OffCanvas.refresh($context);
                });
            }else{
                $('.off-canvas-wrap:not(.drupal-attached)', context).not("#page").once(function() {
                    //TODO support load more / re-binding links
                    var $offCanvasWrap = $(this);
                    $offCanvasWrap.attr("data-oc-presentation", presentationClass).attr("data-oc-side", settings.bolero.offCanvasContentSide);
                    require(["bolero.offcanvas"], function(OffCanvas){
                        OffCanvas.init($offCanvasWrap);
                    });
                }).addClass("drupal-attached");
            }
        }
    };
})(jQuery);
;
